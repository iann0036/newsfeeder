/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	#include "/usr/include/libnfdb/DateTime.h"
	#include "include/Comment.h"
	#include "include/CommentController.h"
	#include "include/ContentPlaceholder.h"
	#include "include/ContentPlaceholderController.h"
	#include "include/DatabaseController.h"
	#include "include/Feed.h"
	#include "include/FeedController.h"
	#include "include/GroupPlaceholder.h"
	#include "include/GroupPlaceholderController.h"
	#include "include/Image.h"
	#include "include/ImageController.h"
	#include "include/Item.h"
	#include "include/ItemController.h"
	#include "include/Layout.h"
	#include "include/LayoutController.h"
	#include "include/Notification.h"
	#include "include/NotificationController.h"
	#include "include/QueueItem.h"
	#include "include/Session.h"
	#include "include/SessionController.h"
	#include "include/Sheet.h"
	#include "include/SheetController.h"
	#include "include/Stat.h"
	#include "include/StatController.h"
	#include "include/User.h"
	#include "include/UserController.h"


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

using namespace nfdb;

SWIGINTERN std::vector< nfdb::Comment >::const_reference std_vector_Sl_nfdb_Comment_Sg__get(std::vector< nfdb::Comment > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Comment_Sg__set(std::vector< nfdb::Comment > *self,int i,std::vector< nfdb::Comment >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::ContentPlaceholder >::const_reference std_vector_Sl_nfdb_ContentPlaceholder_Sg__get(std::vector< nfdb::ContentPlaceholder > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_ContentPlaceholder_Sg__set(std::vector< nfdb::ContentPlaceholder > *self,int i,std::vector< nfdb::ContentPlaceholder >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Feed >::const_reference std_vector_Sl_nfdb_Feed_Sg__get(std::vector< nfdb::Feed > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Feed_Sg__set(std::vector< nfdb::Feed > *self,int i,std::vector< nfdb::Feed >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::GroupPlaceholder >::const_reference std_vector_Sl_nfdb_GroupPlaceholder_Sg__get(std::vector< nfdb::GroupPlaceholder > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_GroupPlaceholder_Sg__set(std::vector< nfdb::GroupPlaceholder > *self,int i,std::vector< nfdb::GroupPlaceholder >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Image >::const_reference std_vector_Sl_nfdb_Image_Sg__get(std::vector< nfdb::Image > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Image_Sg__set(std::vector< nfdb::Image > *self,int i,std::vector< nfdb::Image >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Item >::const_reference std_vector_Sl_nfdb_Item_Sg__get(std::vector< nfdb::Item > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Item_Sg__set(std::vector< nfdb::Item > *self,int i,std::vector< nfdb::Item >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Layout >::const_reference std_vector_Sl_nfdb_Layout_Sg__get(std::vector< nfdb::Layout > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Layout_Sg__set(std::vector< nfdb::Layout > *self,int i,std::vector< nfdb::Layout >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Notification >::const_reference std_vector_Sl_nfdb_Notification_Sg__get(std::vector< nfdb::Notification > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Notification_Sg__set(std::vector< nfdb::Notification > *self,int i,std::vector< nfdb::Notification >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::QueueItem >::const_reference std_vector_Sl_nfdb_QueueItem_Sg__get(std::vector< nfdb::QueueItem > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_QueueItem_Sg__set(std::vector< nfdb::QueueItem > *self,int i,std::vector< nfdb::QueueItem >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Session >::const_reference std_vector_Sl_nfdb_Session_Sg__get(std::vector< nfdb::Session > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Session_Sg__set(std::vector< nfdb::Session > *self,int i,std::vector< nfdb::Session >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Sheet >::const_reference std_vector_Sl_nfdb_Sheet_Sg__get(std::vector< nfdb::Sheet > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Sheet_Sg__set(std::vector< nfdb::Sheet > *self,int i,std::vector< nfdb::Sheet >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::Stat >::const_reference std_vector_Sl_nfdb_Stat_Sg__get(std::vector< nfdb::Stat > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_Stat_Sg__set(std::vector< nfdb::Stat > *self,int i,std::vector< nfdb::Stat >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nfdb::User >::const_reference std_vector_Sl_nfdb_User_Sg__get(std::vector< nfdb::User > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nfdb_User_Sg__set(std::vector< nfdb::User > *self,int i,std::vector< nfdb::User >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1commentvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Comment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Comment > *)new std::vector< nfdb::Comment >();
  *(std::vector< nfdb::Comment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1commentvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Comment >::size_type arg1 ;
  std::vector< nfdb::Comment > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Comment >::size_type)jarg1; 
  result = (std::vector< nfdb::Comment > *)new std::vector< nfdb::Comment >(arg1);
  *(std::vector< nfdb::Comment > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_commentvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  std::vector< nfdb::Comment >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  result = ((std::vector< nfdb::Comment > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_commentvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  std::vector< nfdb::Comment >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  result = ((std::vector< nfdb::Comment > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_commentvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  std::vector< nfdb::Comment >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  arg2 = (std::vector< nfdb::Comment >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_commentvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Comment > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_commentvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_commentvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  std::vector< nfdb::Comment >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Comment >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Comment >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Comment >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_commentvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Comment >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Comment >::value_type *) &std_vector_Sl_nfdb_Comment_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Comment >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_commentvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Comment >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Comment >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Comment >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Comment_Sg__set(arg1,arg2,(nfdb::Comment const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1commentvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Comment > *arg1 = (std::vector< nfdb::Comment > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Comment > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1cphvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::ContentPlaceholder > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::ContentPlaceholder > *)new std::vector< nfdb::ContentPlaceholder >();
  *(std::vector< nfdb::ContentPlaceholder > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1cphvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::ContentPlaceholder >::size_type arg1 ;
  std::vector< nfdb::ContentPlaceholder > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::ContentPlaceholder >::size_type)jarg1; 
  result = (std::vector< nfdb::ContentPlaceholder > *)new std::vector< nfdb::ContentPlaceholder >(arg1);
  *(std::vector< nfdb::ContentPlaceholder > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_cphvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  std::vector< nfdb::ContentPlaceholder >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  result = ((std::vector< nfdb::ContentPlaceholder > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_cphvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  std::vector< nfdb::ContentPlaceholder >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  result = ((std::vector< nfdb::ContentPlaceholder > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_cphvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  std::vector< nfdb::ContentPlaceholder >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  arg2 = (std::vector< nfdb::ContentPlaceholder >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_cphvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  result = (bool)((std::vector< nfdb::ContentPlaceholder > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_cphvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_cphvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  std::vector< nfdb::ContentPlaceholder >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  arg2 = *(std::vector< nfdb::ContentPlaceholder >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::ContentPlaceholder >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::ContentPlaceholder >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_cphvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  int arg2 ;
  std::vector< nfdb::ContentPlaceholder >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::ContentPlaceholder >::value_type *) &std_vector_Sl_nfdb_ContentPlaceholder_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::ContentPlaceholder >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_cphvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  int arg2 ;
  std::vector< nfdb::ContentPlaceholder >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::ContentPlaceholder >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::ContentPlaceholder >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_ContentPlaceholder_Sg__set(arg1,arg2,(nfdb::ContentPlaceholder const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1cphvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::ContentPlaceholder > *arg1 = (std::vector< nfdb::ContentPlaceholder > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::ContentPlaceholder > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1feedvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Feed > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Feed > *)new std::vector< nfdb::Feed >();
  *(std::vector< nfdb::Feed > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1feedvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Feed >::size_type arg1 ;
  std::vector< nfdb::Feed > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Feed >::size_type)jarg1; 
  result = (std::vector< nfdb::Feed > *)new std::vector< nfdb::Feed >(arg1);
  *(std::vector< nfdb::Feed > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_feedvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  std::vector< nfdb::Feed >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  result = ((std::vector< nfdb::Feed > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_feedvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  std::vector< nfdb::Feed >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  result = ((std::vector< nfdb::Feed > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_feedvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  std::vector< nfdb::Feed >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  arg2 = (std::vector< nfdb::Feed >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_feedvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Feed > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_feedvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_feedvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  std::vector< nfdb::Feed >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Feed >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Feed >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Feed >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_feedvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Feed >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Feed >::value_type *) &std_vector_Sl_nfdb_Feed_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Feed >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_feedvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Feed >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Feed >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Feed >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Feed_Sg__set(arg1,arg2,(nfdb::Feed const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1feedvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Feed > *arg1 = (std::vector< nfdb::Feed > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Feed > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1gphvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::GroupPlaceholder > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::GroupPlaceholder > *)new std::vector< nfdb::GroupPlaceholder >();
  *(std::vector< nfdb::GroupPlaceholder > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1gphvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::GroupPlaceholder >::size_type arg1 ;
  std::vector< nfdb::GroupPlaceholder > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::GroupPlaceholder >::size_type)jarg1; 
  result = (std::vector< nfdb::GroupPlaceholder > *)new std::vector< nfdb::GroupPlaceholder >(arg1);
  *(std::vector< nfdb::GroupPlaceholder > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_gphvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  std::vector< nfdb::GroupPlaceholder >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  result = ((std::vector< nfdb::GroupPlaceholder > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_gphvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  std::vector< nfdb::GroupPlaceholder >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  result = ((std::vector< nfdb::GroupPlaceholder > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_gphvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  std::vector< nfdb::GroupPlaceholder >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  arg2 = (std::vector< nfdb::GroupPlaceholder >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_gphvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  result = (bool)((std::vector< nfdb::GroupPlaceholder > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_gphvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_gphvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  std::vector< nfdb::GroupPlaceholder >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  arg2 = *(std::vector< nfdb::GroupPlaceholder >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::GroupPlaceholder >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::GroupPlaceholder >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_gphvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  int arg2 ;
  std::vector< nfdb::GroupPlaceholder >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::GroupPlaceholder >::value_type *) &std_vector_Sl_nfdb_GroupPlaceholder_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::GroupPlaceholder >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_gphvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  int arg2 ;
  std::vector< nfdb::GroupPlaceholder >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::GroupPlaceholder >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::GroupPlaceholder >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_GroupPlaceholder_Sg__set(arg1,arg2,(nfdb::GroupPlaceholder const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1gphvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::GroupPlaceholder > *arg1 = (std::vector< nfdb::GroupPlaceholder > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::GroupPlaceholder > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1imagevector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Image > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Image > *)new std::vector< nfdb::Image >();
  *(std::vector< nfdb::Image > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1imagevector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Image >::size_type arg1 ;
  std::vector< nfdb::Image > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Image >::size_type)jarg1; 
  result = (std::vector< nfdb::Image > *)new std::vector< nfdb::Image >(arg1);
  *(std::vector< nfdb::Image > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_imagevector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  std::vector< nfdb::Image >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  result = ((std::vector< nfdb::Image > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_imagevector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  std::vector< nfdb::Image >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  result = ((std::vector< nfdb::Image > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_imagevector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  std::vector< nfdb::Image >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  arg2 = (std::vector< nfdb::Image >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_imagevector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Image > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_imagevector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_imagevector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  std::vector< nfdb::Image >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Image >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Image >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Image >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_imagevector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Image >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Image >::value_type *) &std_vector_Sl_nfdb_Image_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Image >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_imagevector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Image >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Image >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Image >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Image_Sg__set(arg1,arg2,(nfdb::Image const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1imagevector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Image > *arg1 = (std::vector< nfdb::Image > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Image > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1itemvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Item > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Item > *)new std::vector< nfdb::Item >();
  *(std::vector< nfdb::Item > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1itemvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Item >::size_type arg1 ;
  std::vector< nfdb::Item > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Item >::size_type)jarg1; 
  result = (std::vector< nfdb::Item > *)new std::vector< nfdb::Item >(arg1);
  *(std::vector< nfdb::Item > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_itemvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  std::vector< nfdb::Item >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  result = ((std::vector< nfdb::Item > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_itemvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  std::vector< nfdb::Item >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  result = ((std::vector< nfdb::Item > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_itemvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  std::vector< nfdb::Item >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  arg2 = (std::vector< nfdb::Item >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_itemvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Item > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_itemvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_itemvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  std::vector< nfdb::Item >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Item >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Item >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Item >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_itemvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Item >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Item >::value_type *) &std_vector_Sl_nfdb_Item_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Item >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_itemvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Item >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Item >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Item >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Item_Sg__set(arg1,arg2,(nfdb::Item const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1itemvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Item > *arg1 = (std::vector< nfdb::Item > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Item > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1layoutvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Layout > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Layout > *)new std::vector< nfdb::Layout >();
  *(std::vector< nfdb::Layout > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1layoutvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Layout >::size_type arg1 ;
  std::vector< nfdb::Layout > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Layout >::size_type)jarg1; 
  result = (std::vector< nfdb::Layout > *)new std::vector< nfdb::Layout >(arg1);
  *(std::vector< nfdb::Layout > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_layoutvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  std::vector< nfdb::Layout >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  result = ((std::vector< nfdb::Layout > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_layoutvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  std::vector< nfdb::Layout >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  result = ((std::vector< nfdb::Layout > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_layoutvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  std::vector< nfdb::Layout >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  arg2 = (std::vector< nfdb::Layout >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_layoutvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Layout > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_layoutvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_layoutvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  std::vector< nfdb::Layout >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Layout >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Layout >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Layout >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_layoutvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Layout >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Layout >::value_type *) &std_vector_Sl_nfdb_Layout_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Layout >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_layoutvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Layout >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Layout >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Layout >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Layout_Sg__set(arg1,arg2,(nfdb::Layout const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1layoutvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Layout > *arg1 = (std::vector< nfdb::Layout > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Layout > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1notificationvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Notification > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Notification > *)new std::vector< nfdb::Notification >();
  *(std::vector< nfdb::Notification > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1notificationvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Notification >::size_type arg1 ;
  std::vector< nfdb::Notification > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Notification >::size_type)jarg1; 
  result = (std::vector< nfdb::Notification > *)new std::vector< nfdb::Notification >(arg1);
  *(std::vector< nfdb::Notification > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_notificationvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  std::vector< nfdb::Notification >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  result = ((std::vector< nfdb::Notification > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_notificationvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  std::vector< nfdb::Notification >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  result = ((std::vector< nfdb::Notification > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_notificationvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  std::vector< nfdb::Notification >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  arg2 = (std::vector< nfdb::Notification >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_notificationvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Notification > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_notificationvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_notificationvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  std::vector< nfdb::Notification >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Notification >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Notification >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Notification >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_notificationvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Notification >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Notification >::value_type *) &std_vector_Sl_nfdb_Notification_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Notification >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_notificationvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Notification >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Notification >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Notification >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Notification_Sg__set(arg1,arg2,(nfdb::Notification const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1notificationvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Notification > *arg1 = (std::vector< nfdb::Notification > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Notification > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1queueitemvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::QueueItem > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::QueueItem > *)new std::vector< nfdb::QueueItem >();
  *(std::vector< nfdb::QueueItem > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1queueitemvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::QueueItem >::size_type arg1 ;
  std::vector< nfdb::QueueItem > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::QueueItem >::size_type)jarg1; 
  result = (std::vector< nfdb::QueueItem > *)new std::vector< nfdb::QueueItem >(arg1);
  *(std::vector< nfdb::QueueItem > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_queueitemvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  std::vector< nfdb::QueueItem >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  result = ((std::vector< nfdb::QueueItem > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_queueitemvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  std::vector< nfdb::QueueItem >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  result = ((std::vector< nfdb::QueueItem > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_queueitemvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  std::vector< nfdb::QueueItem >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  arg2 = (std::vector< nfdb::QueueItem >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_queueitemvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  result = (bool)((std::vector< nfdb::QueueItem > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_queueitemvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_queueitemvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  std::vector< nfdb::QueueItem >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  arg2 = *(std::vector< nfdb::QueueItem >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::QueueItem >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::QueueItem >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_queueitemvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  int arg2 ;
  std::vector< nfdb::QueueItem >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::QueueItem >::value_type *) &std_vector_Sl_nfdb_QueueItem_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::QueueItem >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_queueitemvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  int arg2 ;
  std::vector< nfdb::QueueItem >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::QueueItem >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::QueueItem >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_QueueItem_Sg__set(arg1,arg2,(nfdb::QueueItem const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1queueitemvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::QueueItem > *arg1 = (std::vector< nfdb::QueueItem > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::QueueItem > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1sessionvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Session > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Session > *)new std::vector< nfdb::Session >();
  *(std::vector< nfdb::Session > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1sessionvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Session >::size_type arg1 ;
  std::vector< nfdb::Session > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Session >::size_type)jarg1; 
  result = (std::vector< nfdb::Session > *)new std::vector< nfdb::Session >(arg1);
  *(std::vector< nfdb::Session > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_sessionvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  std::vector< nfdb::Session >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  result = ((std::vector< nfdb::Session > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_sessionvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  std::vector< nfdb::Session >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  result = ((std::vector< nfdb::Session > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sessionvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  std::vector< nfdb::Session >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  arg2 = (std::vector< nfdb::Session >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_sessionvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Session > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sessionvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sessionvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  std::vector< nfdb::Session >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Session >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Session >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Session >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_sessionvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Session >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Session >::value_type *) &std_vector_Sl_nfdb_Session_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Session >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sessionvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Session >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Session >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Session >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Session_Sg__set(arg1,arg2,(nfdb::Session const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1sessionvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Session > *arg1 = (std::vector< nfdb::Session > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Session > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1sheetvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Sheet > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Sheet > *)new std::vector< nfdb::Sheet >();
  *(std::vector< nfdb::Sheet > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1sheetvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Sheet >::size_type arg1 ;
  std::vector< nfdb::Sheet > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Sheet >::size_type)jarg1; 
  result = (std::vector< nfdb::Sheet > *)new std::vector< nfdb::Sheet >(arg1);
  *(std::vector< nfdb::Sheet > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_sheetvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  std::vector< nfdb::Sheet >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  result = ((std::vector< nfdb::Sheet > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_sheetvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  std::vector< nfdb::Sheet >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  result = ((std::vector< nfdb::Sheet > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sheetvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  std::vector< nfdb::Sheet >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  arg2 = (std::vector< nfdb::Sheet >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_sheetvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Sheet > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sheetvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sheetvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  std::vector< nfdb::Sheet >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Sheet >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Sheet >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Sheet >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_sheetvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Sheet >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Sheet >::value_type *) &std_vector_Sl_nfdb_Sheet_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Sheet >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_sheetvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Sheet >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Sheet >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Sheet >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Sheet_Sg__set(arg1,arg2,(nfdb::Sheet const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1sheetvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Sheet > *arg1 = (std::vector< nfdb::Sheet > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Sheet > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1statvector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::Stat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::Stat > *)new std::vector< nfdb::Stat >();
  *(std::vector< nfdb::Stat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1statvector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::Stat >::size_type arg1 ;
  std::vector< nfdb::Stat > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::Stat >::size_type)jarg1; 
  result = (std::vector< nfdb::Stat > *)new std::vector< nfdb::Stat >(arg1);
  *(std::vector< nfdb::Stat > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_statvector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  std::vector< nfdb::Stat >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  result = ((std::vector< nfdb::Stat > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_statvector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  std::vector< nfdb::Stat >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  result = ((std::vector< nfdb::Stat > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_statvector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  std::vector< nfdb::Stat >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  arg2 = (std::vector< nfdb::Stat >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_statvector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  result = (bool)((std::vector< nfdb::Stat > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_statvector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_statvector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  std::vector< nfdb::Stat >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  arg2 = *(std::vector< nfdb::Stat >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Stat >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::Stat >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_statvector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Stat >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::Stat >::value_type *) &std_vector_Sl_nfdb_Stat_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::Stat >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_statvector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  int arg2 ;
  std::vector< nfdb::Stat >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::Stat >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::Stat >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_Stat_Sg__set(arg1,arg2,(nfdb::Stat const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1statvector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::Stat > *arg1 = (std::vector< nfdb::Stat > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::Stat > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1uservector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nfdb::User > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nfdb::User > *)new std::vector< nfdb::User >();
  *(std::vector< nfdb::User > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1uservector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nfdb::User >::size_type arg1 ;
  std::vector< nfdb::User > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nfdb::User >::size_type)jarg1; 
  result = (std::vector< nfdb::User > *)new std::vector< nfdb::User >(arg1);
  *(std::vector< nfdb::User > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_uservector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  std::vector< nfdb::User >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  result = ((std::vector< nfdb::User > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_uservector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  std::vector< nfdb::User >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  result = ((std::vector< nfdb::User > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_uservector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  std::vector< nfdb::User >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  arg2 = (std::vector< nfdb::User >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_uservector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  result = (bool)((std::vector< nfdb::User > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_uservector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_uservector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  std::vector< nfdb::User >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  arg2 = *(std::vector< nfdb::User >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::User >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nfdb::User >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_uservector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  int arg2 ;
  std::vector< nfdb::User >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nfdb::User >::value_type *) &std_vector_Sl_nfdb_User_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nfdb::User >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_uservector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  int arg2 ;
  std::vector< nfdb::User >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nfdb::User >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nfdb::User >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nfdb_User_Sg__set(arg1,arg2,(nfdb::User const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1uservector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nfdb::User > *arg1 = (std::vector< nfdb::User > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nfdb::User > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1DateTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfrd::misc::DateTime *)new nfrd::misc::DateTime();
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1DateTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfrd::misc::DateTime *arg1 = 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfrd::misc::DateTime const & reference is null");
    return 0;
  } 
  result = (nfrd::misc::DateTime *)new nfrd::misc::DateTime((nfrd::misc::DateTime const &)*arg1);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_DateTime_1ExportToMySQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = ((nfrd::misc::DateTime const *)arg1)->ExportToMySQL();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1ImportFromMySQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ImportFromMySQL((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1ParseFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseFromString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = (int)((nfrd::misc::DateTime const *)arg1)->GetSecond();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = (int)((nfrd::misc::DateTime const *)arg1)->GetMinute();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = (int)((nfrd::misc::DateTime const *)arg1)->GetHour();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = (int)((nfrd::misc::DateTime const *)arg1)->GetDay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = (int)((nfrd::misc::DateTime const *)arg1)->GetMonth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  result = (int)((nfrd::misc::DateTime const *)arg1)->GetYear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSecond(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMinute(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHour(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDay(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMonth(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetYear(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetTimeOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetTimeOffset(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetTimeOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetTimeOffset(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetTimeOffset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTimeOffset(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDateOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetDateOffset(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDateOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetDateOffset(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDateOffset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDateOffset(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_DateTime_1LessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  nfrd::misc::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfrd::misc::DateTime const & reference is null");
    return 0;
  } 
  result = (bool)((nfrd::misc::DateTime const *)arg1)->operator <((nfrd::misc::DateTime const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_DateTime_1GreaterThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  nfrd::misc::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfrd::misc::DateTime const & reference is null");
    return 0;
  } 
  result = (bool)((nfrd::misc::DateTime const *)arg1)->operator >((nfrd::misc::DateTime const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_DateTime_1EqualsEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  nfrd::misc::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfrd::misc::DateTime const & reference is null");
    return 0;
  } 
  result = (bool)((nfrd::misc::DateTime const *)arg1)->operator ==((nfrd::misc::DateTime const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_DateTime_1NotEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nfrd::misc::DateTime *arg1 = (nfrd::misc::DateTime *) 0 ;
  nfrd::misc::DateTime *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfrd::misc::DateTime **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfrd::misc::DateTime const & reference is null");
    return 0;
  } 
  result = (bool)((nfrd::misc::DateTime const *)arg1)->operator !=((nfrd::misc::DateTime const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Comment_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1itemId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->itemId = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Comment_1itemId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (int) ((arg1)->itemId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1author_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->author = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Comment_1author_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (std::string *) & ((arg1)->author);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1via_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->via = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Comment_1via_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (std::string *) & ((arg1)->via);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1date_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  nfrd::misc::DateTime *arg2 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Comment_1date_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (nfrd::misc::DateTime *)& ((arg1)->date);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1comment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->comment = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Comment_1comment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (std::string *) & ((arg1)->comment);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1avatar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->avatar) delete [] arg1->avatar;
    if (arg2) {
      arg1->avatar = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->avatar, (const char *)arg2);
    } else {
      arg1->avatar = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Comment_1avatar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (char *) ((arg1)->avatar);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1avatarSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->avatarSize = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Comment_1avatarSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  result = (int) ((arg1)->avatarSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Comment_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Comment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Comment *)new nfdb::Comment();
  *(nfdb::Comment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Comment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jstring jarg7, jint jarg8) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  nfrd::misc::DateTime arg5 ;
  std::string arg6 ;
  char *arg7 = (char *) 0 ;
  int arg8 ;
  nfrd::misc::DateTime *argp5 ;
  nfdb::Comment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  argp5 = *(nfrd::misc::DateTime **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null nfrd::misc::DateTime");
    return 0;
  }
  arg5 = *argp5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = (int)jarg8; 
  result = (nfdb::Comment *)new nfdb::Comment(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(nfdb::Comment **)&jresult = result; 
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Comment(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Comment **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Comment_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Comment *arg1 = (nfdb::Comment *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Comment **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1CommentController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::CommentController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::CommentController *)new nfdb::CommentController();
  *(nfdb::CommentController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1CommentController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_CommentController_1GetCommentById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  int arg2 ;
  nfdb::Comment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Comment *)(arg1)->GetCommentById(arg2);
  *(nfdb::Comment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_CommentController_1GetCommentsByItemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::Comment * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetCommentsByItemId(arg2);
  *(std::vector< nfdb::Comment * > **)&jresult = new std::vector< nfdb::Comment * >((const std::vector< nfdb::Comment * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_CommentController_1GetAllComments(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Comment * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  result = (arg1)->GetAllComments();
  *(std::vector< nfdb::Comment * > **)&jresult = new std::vector< nfdb::Comment * >((const std::vector< nfdb::Comment * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_CommentController_1AddComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  nfdb::Comment *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = *(nfdb::Comment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Comment & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddComment(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_CommentController_1UpdateComment_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  nfdb::Comment *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = *(nfdb::Comment **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Comment & reference is null");
    return ;
  } 
  (arg1)->UpdateComment(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_CommentController_1UpdateComment_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jstring jarg8, jint jarg9) {
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string *arg5 = (std::string *) 0 ;
  nfrd::misc::DateTime *arg6 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg7 = (std::string *) 0 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(std::string **)&jarg5; 
  arg6 = *(nfrd::misc::DateTime **)&jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return ;
  }
  arg9 = (int)jarg9; 
  (arg1)->UpdateComment(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_CommentController_1RemoveComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveComment(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_CommentController_1GenerateComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::CommentController *arg1 = (nfdb::CommentController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Comment *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::CommentController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Comment *)(arg1)->GenerateComment(*arg2);
  *(nfdb::Comment **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholder_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ContentPlaceholder_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholder_1sheetId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sheetId = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ContentPlaceholder_1sheetId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  result = (int) ((arg1)->sheetId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholder_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ContentPlaceholder_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholder_1column_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->column = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ContentPlaceholder_1column_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  result = (int) ((arg1)->column);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholder_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->order = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ContentPlaceholder_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  result = (int) ((arg1)->order);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1ContentPlaceholder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::ContentPlaceholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::ContentPlaceholder *)new nfdb::ContentPlaceholder();
  *(nfdb::ContentPlaceholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1ContentPlaceholder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  nfdb::ContentPlaceholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (nfdb::ContentPlaceholder *)new nfdb::ContentPlaceholder(arg1,arg2,arg3,arg4,arg5);
  *(nfdb::ContentPlaceholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1ContentPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholder_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::ContentPlaceholder *arg1 = (nfdb::ContentPlaceholder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholder **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1ContentPlaceholderController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::ContentPlaceholderController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::ContentPlaceholderController *)new nfdb::ContentPlaceholderController();
  *(nfdb::ContentPlaceholderController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1ContentPlaceholderController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ContentPlaceholderController_1GetContentPlaceholderById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  int arg2 ;
  nfdb::ContentPlaceholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::ContentPlaceholder *)(arg1)->GetContentPlaceholderById(arg2);
  *(nfdb::ContentPlaceholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ContentPlaceholderController_1GetContentPlaceholdersBySheetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::ContentPlaceholder * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetContentPlaceholdersBySheetId(arg2);
  *(std::vector< nfdb::ContentPlaceholder * > **)&jresult = new std::vector< nfdb::ContentPlaceholder * >((const std::vector< nfdb::ContentPlaceholder * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ContentPlaceholderController_1GetAllContentPlaceholders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::ContentPlaceholder * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  result = (arg1)->GetAllContentPlaceholders();
  *(std::vector< nfdb::ContentPlaceholder * > **)&jresult = new std::vector< nfdb::ContentPlaceholder * >((const std::vector< nfdb::ContentPlaceholder * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ContentPlaceholderController_1AddContentPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  nfdb::ContentPlaceholder *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = *(nfdb::ContentPlaceholder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::ContentPlaceholder & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddContentPlaceholder(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholderController_1UpdateContentPlaceholder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  nfdb::ContentPlaceholder *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = *(nfdb::ContentPlaceholder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::ContentPlaceholder & reference is null");
    return ;
  } 
  (arg1)->UpdateContentPlaceholder(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholderController_1UpdateContentPlaceholder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  bool *arg5 = (bool *) 0 ;
  int *arg6 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(bool **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  (arg1)->UpdateContentPlaceholder(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ContentPlaceholderController_1RemoveContentPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveContentPlaceholder(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ContentPlaceholderController_1GenerateContentPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::ContentPlaceholderController *arg1 = (nfdb::ContentPlaceholderController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::ContentPlaceholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ContentPlaceholderController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::ContentPlaceholder *)(arg1)->GenerateContentPlaceholder(*arg2);
  *(nfdb::ContentPlaceholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1DatabaseController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::DatabaseController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::DatabaseController *)new nfdb::DatabaseController();
  *(nfdb::DatabaseController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1DatabaseController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::DatabaseController *arg1 = (nfdb::DatabaseController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::DatabaseController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_DatabaseController_1Connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::DatabaseController *arg1 = (nfdb::DatabaseController *) 0 ;
  sql::Connection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::DatabaseController **)&jarg1; 
  result = (sql::Connection *)(arg1)->Connect();
  *(sql::Connection **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DatabaseController_1Disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::DatabaseController *arg1 = (nfdb::DatabaseController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::DatabaseController **)&jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Feed_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Feed_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Feed_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1frequency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->frequency = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Feed_1frequency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (int) ((arg1)->frequency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1lastUpdate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  nfrd::misc::DateTime *arg2 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2; 
  if (arg1) (arg1)->lastUpdate = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Feed_1lastUpdate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (nfrd::misc::DateTime *) ((arg1)->lastUpdate);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1category_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  if (arg1) (arg1)->category = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Feed_1category_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (std::string *) ((arg1)->category);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Feed_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (int *) ((arg1)->type);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1favIcon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->favIcon) delete [] arg1->favIcon;
    if (arg2) {
      arg1->favIcon = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->favIcon, (const char *)arg2);
    } else {
      arg1->favIcon = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Feed_1favIcon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (char *) ((arg1)->favIcon);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1iconSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iconSize = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Feed_1iconSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  result = (int) ((arg1)->iconSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Feed_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Feed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Feed *)new nfdb::Feed();
  *(nfdb::Feed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Feed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jlong jarg6, jlong jarg7, jstring jarg8, jint jarg9) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  int arg4 ;
  nfrd::misc::DateTime *arg5 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg6 = (std::string *) 0 ;
  int *arg7 = (int *) 0 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  nfdb::Feed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (int)jarg4; 
  arg5 = *(nfrd::misc::DateTime **)&jarg5; 
  arg6 = *(std::string **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (int)jarg9; 
  result = (nfdb::Feed *)new nfdb::Feed(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(nfdb::Feed **)&jresult = result; 
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Feed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Feed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Feed_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Feed *arg1 = (nfdb::Feed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Feed **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1FeedController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::FeedController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::FeedController *)new nfdb::FeedController();
  *(nfdb::FeedController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1FeedController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GetFeedById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  nfdb::Feed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Feed *)(arg1)->GetFeedById(arg2);
  *(nfdb::Feed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GetFeedsByCphId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::Feed * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetFeedsByCphId(arg2);
  *(std::vector< nfdb::Feed * > **)&jresult = new std::vector< nfdb::Feed * >((const std::vector< nfdb::Feed * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GetFeedsByUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::vector< nfdb::Feed * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->GetFeedsByUsername(arg2);
  *(std::vector< nfdb::Feed * > **)&jresult = new std::vector< nfdb::Feed * >((const std::vector< nfdb::Feed * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GetAllFeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Feed * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  result = (arg1)->GetAllFeeds();
  *(std::vector< nfdb::Feed * > **)&jresult = new std::vector< nfdb::Feed * >((const std::vector< nfdb::Feed * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GetQueueFeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  SwigValueWrapper< std::vector< QueueItem * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  result = (arg1)->GetQueueFeeds();
  *(std::vector< QueueItem * > **)&jresult = new std::vector< QueueItem * >((const std::vector< QueueItem * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GetNewFeeds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::Feed * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetNewFeeds(arg2);
  *(std::vector< nfdb::Feed * > **)&jresult = new std::vector< nfdb::Feed * >((const std::vector< nfdb::Feed * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_FeedController_1AddFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  nfdb::Feed *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = *(nfdb::Feed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Feed & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddFeed(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_FeedController_1UpdateFeed_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  nfdb::Feed *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = *(nfdb::Feed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Feed & reference is null");
    return ;
  } 
  (arg1)->UpdateFeed(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_FeedController_1UpdateFeed_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jstring jarg9, jlong jarg10) {
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  int *arg5 = (int *) 0 ;
  nfrd::misc::DateTime *arg6 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg7 = (std::string *) 0 ;
  int *arg8 = (int *) 0 ;
  char *arg9 = (char *) 0 ;
  int *arg10 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = *(nfrd::misc::DateTime **)&jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(int **)&jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return ;
  }
  arg10 = *(int **)&jarg10; 
  (arg1)->UpdateFeed(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_FeedController_1RemoveFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveFeed(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GenerateFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Feed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Feed *)(arg1)->GenerateFeed(*arg2);
  *(nfdb::Feed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_FeedController_1GenerateQueueItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  QueueItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (QueueItem *)(arg1)->GenerateQueueItem(*arg2);
  *(QueueItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_FeedController_1GetNumberOfFeedUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetNumberOfFeedUsers(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_FeedController_1UpdateLastUpdateTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::FeedController *arg1 = (nfdb::FeedController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::FeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->UpdateLastUpdateTime(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_GroupPlaceholder_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::GroupPlaceholder *arg1 = (nfdb::GroupPlaceholder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::GroupPlaceholder **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_GroupPlaceholder_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::GroupPlaceholder *arg1 = (nfdb::GroupPlaceholder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::GroupPlaceholder **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1GroupPlaceholder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::GroupPlaceholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::GroupPlaceholder *)new nfdb::GroupPlaceholder();
  *(nfdb::GroupPlaceholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1GroupPlaceholder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  nfdb::GroupPlaceholder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (nfdb::GroupPlaceholder *)new nfdb::GroupPlaceholder(arg1);
  *(nfdb::GroupPlaceholder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1GroupPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::GroupPlaceholder *arg1 = (nfdb::GroupPlaceholder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::GroupPlaceholder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_GroupPlaceholder_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::GroupPlaceholder *arg1 = (nfdb::GroupPlaceholder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::GroupPlaceholder **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1GroupPlaceholderController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::GroupPlaceholderController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::GroupPlaceholderController *)new nfdb::GroupPlaceholderController();
  *(nfdb::GroupPlaceholderController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1GroupPlaceholderController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_GroupPlaceholderController_1GetGroupPlaceholderById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  int arg2 ;
  nfdb::GroupPlaceholder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetGroupPlaceholderById(arg2);
  *(nfdb::GroupPlaceholder **)&jresult = new nfdb::GroupPlaceholder((const nfdb::GroupPlaceholder &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_GroupPlaceholderController_1GetAllGroupPlaceholders(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  std::vector< nfdb::GroupPlaceholder > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  result = (arg1)->GetAllGroupPlaceholders();
  *(std::vector< nfdb::GroupPlaceholder > **)&jresult = new std::vector< nfdb::GroupPlaceholder >((const std::vector< nfdb::GroupPlaceholder > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_GroupPlaceholderController_1AddGroupPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  nfdb::GroupPlaceholder *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  arg2 = *(nfdb::GroupPlaceholder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::GroupPlaceholder & reference is null");
    return ;
  } 
  (arg1)->AddGroupPlaceholder(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_GroupPlaceholderController_1UpdateGroupPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  nfdb::GroupPlaceholder *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  arg2 = *(nfdb::GroupPlaceholder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::GroupPlaceholder & reference is null");
    return ;
  } 
  (arg1)->UpdateGroupPlaceholder(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_GroupPlaceholderController_1RemoveGroupPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  nfdb::GroupPlaceholder *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  arg2 = *(nfdb::GroupPlaceholder **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::GroupPlaceholder & reference is null");
    return ;
  } 
  (arg1)->RemoveGroupPlaceholder(*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_GroupPlaceholderController_1GenerateGroupPlaceholder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::GroupPlaceholderController *arg1 = (nfdb::GroupPlaceholderController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::GroupPlaceholder result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::GroupPlaceholderController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (arg1)->GenerateGroupPlaceholder(*arg2);
  *(nfdb::GroupPlaceholder **)&jresult = new nfdb::GroupPlaceholder((const nfdb::GroupPlaceholder &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Image_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Image_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Image_1itemId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->itemId = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Image_1itemId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  result = (int) ((arg1)->itemId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Image_1image_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->image) delete [] arg1->image;
    if (arg2) {
      arg1->image = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->image, (const char *)arg2);
    } else {
      arg1->image = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Image_1image_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  result = (char *) ((arg1)->image);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Image_1imageSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->imageSize = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Image_1imageSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  result = (int) ((arg1)->imageSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Image_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Image_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Image_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Image *)new nfdb::Image();
  *(nfdb::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Image_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jint jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  std::string arg5 ;
  nfdb::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  result = (nfdb::Image *)new nfdb::Image(arg1,arg2,arg3,arg4,arg5);
  *(nfdb::Image **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Image(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Image **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Image_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Image *arg1 = (nfdb::Image *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Image **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1ImageController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::ImageController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::ImageController *)new nfdb::ImageController();
  *(nfdb::ImageController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1ImageController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ImageController_1GetImageById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  int arg2 ;
  nfdb::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Image *)(arg1)->GetImageById(arg2);
  *(nfdb::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ImageController_1GetImagesByItemId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::Image * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetImagesByItemId(arg2);
  *(std::vector< nfdb::Image * > **)&jresult = new std::vector< nfdb::Image * >((const std::vector< nfdb::Image * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ImageController_1GetAllImages(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Image * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  result = (arg1)->GetAllImages();
  *(std::vector< nfdb::Image * > **)&jresult = new std::vector< nfdb::Image * >((const std::vector< nfdb::Image * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ImageController_1AddImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  nfdb::Image *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = *(nfdb::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Image & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddImage(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ImageController_1UpdateImage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  nfdb::Image *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = *(nfdb::Image **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Image & reference is null");
    return ;
  } 
  (arg1)->UpdateImage(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ImageController_1UpdateImage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  char *arg4 = (char *) 0 ;
  int *arg5 = (int *) 0 ;
  std::string *arg6 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(int **)&jarg5; 
  arg6 = *(std::string **)&jarg6; 
  (arg1)->UpdateImage(arg2,arg3,arg4,arg5,arg6);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ImageController_1RemoveImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveImage(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ImageController_1GenerateImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::ImageController *arg1 = (nfdb::ImageController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Image *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ImageController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Image *)(arg1)->GenerateImage(*arg2);
  *(nfdb::Image **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Item_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1feedId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->feedId = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Item_1feedId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (int) ((arg1)->feedId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1title_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Item_1title_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (std::string *) & ((arg1)->title);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1url_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->url = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Item_1url_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (std::string *) & ((arg1)->url);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Item_1content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (std::string *) & ((arg1)->content);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1postDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  nfrd::misc::DateTime *arg2 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::Item **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2; 
  if (arg1) (arg1)->postDate = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Item_1postDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (nfrd::misc::DateTime *) ((arg1)->postDate);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1author_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  if (arg1) (arg1)->author = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Item_1author_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (std::string *) ((arg1)->author);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1geolocation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *arg2 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  arg2 = *(std::string **)&jarg2; 
  if (arg1) (arg1)->geolocation = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Item_1geolocation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  result = (std::string *) ((arg1)->geolocation);
  *(std::string **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Item_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Item *)new nfdb::Item();
  *(nfdb::Item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Item_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  nfrd::misc::DateTime *arg6 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg7 = (std::string *) 0 ;
  std::string *arg8 = (std::string *) 0 ;
  nfdb::Item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg6_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  (&arg5)->assign(arg5_pstr);
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = *(nfrd::misc::DateTime **)&jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(std::string **)&jarg8; 
  result = (nfdb::Item *)new nfdb::Item(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(nfdb::Item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Item(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Item **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Item_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Item *arg1 = (nfdb::Item *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Item **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1ItemController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::ItemController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::ItemController *)new nfdb::ItemController();
  *(nfdb::ItemController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1ItemController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ItemController_1GetItemById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  int arg2 ;
  nfdb::Item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Item *)(arg1)->GetItemById(arg2);
  *(nfdb::Item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ItemController_1GetItemsByFeedId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::Item * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetItemsByFeedId(arg2);
  *(std::vector< nfdb::Item * > **)&jresult = new std::vector< nfdb::Item * >((const std::vector< nfdb::Item * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ItemController_1GetAllItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Item * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  result = (arg1)->GetAllItems();
  *(std::vector< nfdb::Item * > **)&jresult = new std::vector< nfdb::Item * >((const std::vector< nfdb::Item * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_ItemController_1AddItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  nfdb::Item *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = *(nfdb::Item **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Item & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddItem(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ItemController_1UpdateItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  nfdb::Item *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = *(nfdb::Item **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Item & reference is null");
    return ;
  } 
  (arg1)->UpdateItem(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ItemController_1UpdateItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jlong jarg9) {
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  std::string *arg5 = (std::string *) 0 ;
  std::string *arg6 = (std::string *) 0 ;
  nfrd::misc::DateTime *arg7 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg8 = (std::string *) 0 ;
  std::string *arg9 = (std::string *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(std::string **)&jarg5; 
  arg6 = *(std::string **)&jarg6; 
  arg7 = *(nfrd::misc::DateTime **)&jarg7; 
  arg8 = *(std::string **)&jarg8; 
  arg9 = *(std::string **)&jarg9; 
  (arg1)->UpdateItem(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ItemController_1RemoveItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveItem(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ItemController_1GenerateItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::ItemController *arg1 = (nfdb::ItemController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Item *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::ItemController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Item *)(arg1)->GenerateItem(*arg2);
  *(nfdb::Item **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Layout_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Layout *arg1 = (nfdb::Layout *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Layout **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Layout_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Layout *arg1 = (nfdb::Layout *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Layout **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Layout_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Layout *)new nfdb::Layout();
  *(nfdb::Layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Layout_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  nfdb::Layout *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (nfdb::Layout *)new nfdb::Layout(arg1);
  *(nfdb::Layout **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Layout(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Layout *arg1 = (nfdb::Layout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Layout **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Layout_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Layout *arg1 = (nfdb::Layout *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Layout **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1LayoutController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::LayoutController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::LayoutController *)new nfdb::LayoutController();
  *(nfdb::LayoutController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1LayoutController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_LayoutController_1GetLayoutById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  int arg2 ;
  nfdb::Layout result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetLayoutById(arg2);
  *(nfdb::Layout **)&jresult = new nfdb::Layout((const nfdb::Layout &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_LayoutController_1GetAllLayouts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  std::vector< nfdb::Layout > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  result = (arg1)->GetAllLayouts();
  *(std::vector< nfdb::Layout > **)&jresult = new std::vector< nfdb::Layout >((const std::vector< nfdb::Layout > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_LayoutController_1AddLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  nfdb::Layout *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  arg2 = *(nfdb::Layout **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Layout & reference is null");
    return ;
  } 
  (arg1)->AddLayout(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_LayoutController_1UpdateLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  nfdb::Layout *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  arg2 = *(nfdb::Layout **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Layout & reference is null");
    return ;
  } 
  (arg1)->UpdateLayout(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_LayoutController_1RemoveLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  nfdb::Layout *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  arg2 = *(nfdb::Layout **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Layout & reference is null");
    return ;
  } 
  (arg1)->RemoveLayout(*arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_LayoutController_1GenerateLayout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::LayoutController *arg1 = (nfdb::LayoutController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Layout result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::LayoutController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (arg1)->GenerateLayout(*arg2);
  *(nfdb::Layout **)&jresult = new nfdb::Layout((const nfdb::Layout &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Notification_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Notification_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Notification_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Notification_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Notification_1sheetId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sheetId = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Notification_1sheetId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  result = (int) ((arg1)->sheetId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Notification_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Notification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Notification *)new nfdb::Notification();
  *(nfdb::Notification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Notification_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  int arg3 ;
  nfdb::Notification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (nfdb::Notification *)new nfdb::Notification(arg1,arg2,arg3);
  *(nfdb::Notification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Notification(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Notification **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Notification_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Notification *arg1 = (nfdb::Notification *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Notification **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1NotificationController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::NotificationController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::NotificationController *)new nfdb::NotificationController();
  *(nfdb::NotificationController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1NotificationController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_NotificationController_1GetNotificationById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  int arg2 ;
  nfdb::Notification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Notification *)(arg1)->GetNotificationById(arg2);
  *(nfdb::Notification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_NotificationController_1GetNotificationsBySheetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< nfdb::Notification * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetNotificationsBySheetId(arg2);
  *(std::vector< nfdb::Notification * > **)&jresult = new std::vector< nfdb::Notification * >((const std::vector< nfdb::Notification * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_NotificationController_1GetNotificationsByUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::vector< nfdb::Notification * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->GetNotificationsByUsername(arg2);
  *(std::vector< nfdb::Notification * > **)&jresult = new std::vector< nfdb::Notification * >((const std::vector< nfdb::Notification * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_NotificationController_1GetAllNotifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Notification * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  result = (arg1)->GetAllNotifications();
  *(std::vector< nfdb::Notification * > **)&jresult = new std::vector< nfdb::Notification * >((const std::vector< nfdb::Notification * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_NotificationController_1AddNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  nfdb::Notification *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = *(nfdb::Notification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Notification & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddNotification(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_NotificationController_1UpdateNotification_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  nfdb::Notification *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = *(nfdb::Notification **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Notification & reference is null");
    return ;
  } 
  (arg1)->UpdateNotification(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_NotificationController_1UpdateNotification_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  int *arg4 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  (arg1)->UpdateNotification(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_NotificationController_1RemoveNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveNotification(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_NotificationController_1AddFeedUpdateNotifications(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->AddFeedUpdateNotifications(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_NotificationController_1GenerateNotification(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::NotificationController *arg1 = (nfdb::NotificationController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Notification *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::NotificationController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Notification *)(arg1)->GenerateNotification(*arg2);
  *(nfdb::Notification **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_QueueItem_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_QueueItem_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_QueueItem_1frequency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->frequency = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_QueueItem_1frequency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  result = (int) ((arg1)->frequency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_QueueItem_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int *arg2 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_QueueItem_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  result = (int *) ((arg1)->type);
  *(int **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_QueueItem_1numUsers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numUsers = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_QueueItem_1numUsers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  result = (int) ((arg1)->numUsers);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1QueueItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::QueueItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::QueueItem *)new nfdb::QueueItem();
  *(nfdb::QueueItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1QueueItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  nfdb::QueueItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = (int)jarg4; 
  result = (nfdb::QueueItem *)new nfdb::QueueItem(arg1,arg2,arg3,arg4);
  *(nfdb::QueueItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1QueueItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_QueueItem_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::QueueItem *arg1 = (nfdb::QueueItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::QueueItem **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Session_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Session_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Session_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Session_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Session_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Session_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  result = (std::string *) & ((arg1)->key);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Session_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  nfrd::misc::DateTime *arg2 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::Session **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2; 
  if (arg1) (arg1)->time = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Session_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  result = (nfrd::misc::DateTime *)& ((arg1)->time);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Session_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Session *)new nfdb::Session();
  *(nfdb::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Session_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  nfrd::misc::DateTime arg4 ;
  nfrd::misc::DateTime *argp4 ;
  nfdb::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(nfrd::misc::DateTime **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null nfrd::misc::DateTime");
    return 0;
  }
  arg4 = *argp4; 
  result = (nfdb::Session *)new nfdb::Session(arg1,arg2,arg3,arg4);
  *(nfdb::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Session(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Session **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Session_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Session *arg1 = (nfdb::Session *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Session **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1SessionController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::SessionController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::SessionController *)new nfdb::SessionController();
  *(nfdb::SessionController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1SessionController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SessionController_1GetSessionById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  int arg2 ;
  nfdb::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Session *)(arg1)->GetSessionById(arg2);
  *(nfdb::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SessionController_1GetSessionsByUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::vector< nfdb::Session * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->GetSessionsByUsername(arg2);
  *(std::vector< nfdb::Session * > **)&jresult = new std::vector< nfdb::Session * >((const std::vector< nfdb::Session * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SessionController_1GetSessionByKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  std::string arg2 ;
  nfdb::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (nfdb::Session *)(arg1)->GetSessionByKey(arg2);
  *(nfdb::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SessionController_1GetAllSessions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Session * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  result = (arg1)->GetAllSessions();
  *(std::vector< nfdb::Session * > **)&jresult = new std::vector< nfdb::Session * >((const std::vector< nfdb::Session * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_SessionController_1AddSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  nfdb::Session *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  arg2 = *(nfdb::Session **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Session & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddSession(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_SessionController_1UpdateSession_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  nfdb::Session *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  arg2 = *(nfdb::Session **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Session & reference is null");
    return ;
  } 
  (arg1)->UpdateSession(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_SessionController_1UpdateSession_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  nfrd::misc::DateTime *arg5 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(nfrd::misc::DateTime **)&jarg5; 
  (arg1)->UpdateSession(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_SessionController_1RemoveSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveSession(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SessionController_1GenerateSession(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::SessionController *arg1 = (nfdb::SessionController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Session *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SessionController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Session *)(arg1)->GenerateSession(*arg2);
  *(nfdb::Session **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Sheet_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Sheet_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Sheet_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Sheet_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Sheet_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_Sheet_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Sheet_1updated_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  nfrd::misc::DateTime *arg2 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2; 
  if (arg1) (arg1)->updated = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_Sheet_1updated_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  result = (nfrd::misc::DateTime *)& ((arg1)->updated);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Sheet_1layoutId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->layoutId = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Sheet_1layoutId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  result = (int) ((arg1)->layoutId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Sheet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Sheet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Sheet *)new nfdb::Sheet();
  *(nfdb::Sheet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Sheet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jlong jresult = 0 ;
  int arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  nfrd::misc::DateTime arg4 ;
  int arg5 ;
  nfrd::misc::DateTime *argp4 ;
  nfdb::Sheet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  argp4 = *(nfrd::misc::DateTime **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null nfrd::misc::DateTime");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  result = (nfdb::Sheet *)new nfdb::Sheet(arg1,arg2,arg3,arg4,arg5);
  *(nfdb::Sheet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Sheet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Sheet_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Sheet *arg1 = (nfdb::Sheet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Sheet **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1SheetController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::SheetController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::SheetController *)new nfdb::SheetController();
  *(nfdb::SheetController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1SheetController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SheetController_1GetSheetById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  int arg2 ;
  nfdb::Sheet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Sheet *)(arg1)->GetSheetById(arg2);
  *(nfdb::Sheet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SheetController_1GetSheetsByUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< std::vector< nfdb::Sheet * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->GetSheetsByUsername(arg2);
  *(std::vector< nfdb::Sheet * > **)&jresult = new std::vector< nfdb::Sheet * >((const std::vector< nfdb::Sheet * > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SheetController_1GetAllSheets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Sheet * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  result = (arg1)->GetAllSheets();
  *(std::vector< nfdb::Sheet * > **)&jresult = new std::vector< nfdb::Sheet * >((const std::vector< nfdb::Sheet * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_SheetController_1AddSheet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  nfdb::Sheet *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  arg2 = *(nfdb::Sheet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Sheet & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddSheet(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_SheetController_1UpdateSheet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  nfdb::Sheet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  arg2 = *(nfdb::Sheet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Sheet & reference is null");
    return ;
  } 
  (arg1)->UpdateSheet(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_SheetController_1UpdateSheet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  int arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  std::string *arg4 = (std::string *) 0 ;
  nfrd::misc::DateTime *arg5 = (nfrd::misc::DateTime *) 0 ;
  int *arg6 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::string **)&jarg3; 
  arg4 = *(std::string **)&jarg4; 
  arg5 = *(nfrd::misc::DateTime **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  (arg1)->UpdateSheet(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_SheetController_1RemoveSheet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveSheet(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_SheetController_1GenerateSheet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::SheetController *arg1 = (nfdb::SheetController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Sheet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::SheetController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Sheet *)(arg1)->GenerateSheet(*arg2);
  *(nfdb::Sheet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Stat_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1users_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->users = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Stat_1users_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  result = (int) ((arg1)->users);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1sheets_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sheets = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Stat_1sheets_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  result = (int) ((arg1)->sheets);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1feeds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->feeds = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Stat_1feeds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  result = (int) ((arg1)->feeds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1items_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->items = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Stat_1items_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  result = (int) ((arg1)->items);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1comments_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->comments = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_Stat_1comments_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  result = (int) ((arg1)->comments);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Stat_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::Stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::Stat *)new nfdb::Stat();
  *(nfdb::Stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Stat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  nfdb::Stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (nfdb::Stat *)new nfdb::Stat(arg1,arg2,arg3,arg4,arg5,arg6);
  *(nfdb::Stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Stat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::Stat **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_Stat_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::Stat *arg1 = (nfdb::Stat *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::Stat **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1StatController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::StatController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::StatController *)new nfdb::StatController();
  *(nfdb::StatController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1StatController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::StatController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_StatController_1GetStatById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  int arg2 ;
  nfdb::Stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (nfdb::Stat *)(arg1)->GetStatById(arg2);
  *(nfdb::Stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_StatController_1GetLatestStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  nfdb::Stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  result = (nfdb::Stat *)(arg1)->GetLatestStat();
  *(nfdb::Stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_StatController_1GetAllStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::Stat * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  result = (arg1)->GetAllStats();
  *(std::vector< nfdb::Stat * > **)&jresult = new std::vector< nfdb::Stat * >((const std::vector< nfdb::Stat * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_StatController_1AddStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  nfdb::Stat *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  arg2 = *(nfdb::Stat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Stat & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddStat(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_StatController_1UpdateStat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  nfdb::Stat *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  arg2 = *(nfdb::Stat **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::Stat & reference is null");
    return ;
  } 
  (arg1)->UpdateStat(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_StatController_1UpdateStat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(int **)&jarg5; 
  arg6 = *(int **)&jarg6; 
  arg7 = *(int **)&jarg7; 
  (arg1)->UpdateStat(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_StatController_1RemoveStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->RemoveStat(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_StatController_1GenerateStat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::StatController *arg1 = (nfdb::StatController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::Stat *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::StatController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::Stat *)(arg1)->GenerateStat(*arg2);
  *(nfdb::Stat **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1username_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_User_1username_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (std::string *) & ((arg1)->username);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_User_1password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (std::string *) & ((arg1)->password);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1picture_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->picture) delete [] arg1->picture;
    if (arg2) {
      arg1->picture = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->picture, (const char *)arg2);
    } else {
      arg1->picture = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_User_1picture_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (char *) ((arg1)->picture);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1pictureSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pictureSize = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_User_1pictureSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (int) ((arg1)->pictureSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1registered_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  nfrd::misc::DateTime *arg2 = (nfrd::misc::DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::User **)&jarg1; 
  arg2 = *(nfrd::misc::DateTime **)&jarg2; 
  if (arg1) (arg1)->registered = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_User_1registered_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  nfrd::misc::DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (nfrd::misc::DateTime *)& ((arg1)->registered);
  *(nfrd::misc::DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1realname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->realname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_User_1realname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (std::string *) & ((arg1)->realname);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1email_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->email = *arg2;
}


SWIGEXPORT jstring JNICALL Java_libnfdbJNI_User_1email_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (std::string *) & ((arg1)->email);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1layout_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->layout = arg2;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_User_1layout_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (int) ((arg1)->layout);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1admin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->admin = arg2;
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_User_1admin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (bool) ((arg1)->admin);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1https_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->https = arg2;
}


SWIGEXPORT jboolean JNICALL Java_libnfdbJNI_User_1https_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  result = (bool) ((arg1)->https);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1User_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::User *)new nfdb::User();
  *(nfdb::User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1User_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jstring jarg7, jint jarg8, jboolean jarg9, jboolean jarg10) {
  jlong jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  nfrd::misc::DateTime arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  int arg8 ;
  bool arg9 ;
  bool arg10 ;
  nfrd::misc::DateTime *argp5 ;
  nfdb::User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (int)jarg4; 
  argp5 = *(nfrd::misc::DateTime **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null nfrd::misc::DateTime");
    return 0;
  }
  arg5 = *argp5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return 0;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  arg8 = (int)jarg8; 
  arg9 = jarg9 ? true : false; 
  arg10 = jarg10 ? true : false; 
  result = (nfdb::User *)new nfdb::User(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(nfdb::User **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1User(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::User **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_User_1Destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nfdb::User *arg1 = (nfdb::User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::User **)&jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1UserController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nfdb::UserController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nfdb::UserController *)new nfdb::UserController();
  *(nfdb::UserController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1UserController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nfdb::UserController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_UserController_1GetUserByUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  std::string arg2 ;
  nfdb::User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (nfdb::User *)(arg1)->GetUserByUsername(arg2);
  *(nfdb::User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_UserController_1GetAllUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  SwigValueWrapper< std::vector< nfdb::User * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  result = (arg1)->GetAllUsers();
  *(std::vector< nfdb::User * > **)&jresult = new std::vector< nfdb::User * >((const std::vector< nfdb::User * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_UserController_1AddUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  nfdb::User *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  arg2 = *(nfdb::User **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::User & reference is null");
    return 0;
  } 
  result = (int)(arg1)->AddUser(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_UserController_1UpdateUser_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  nfdb::User *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  arg2 = *(nfdb::User **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nfdb::User & reference is null");
    return ;
  } 
  (arg1)->UpdateUser(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_UserController_1UpdateUser_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6, jobject jarg6_, jlong jarg7, jlong jarg8, jlong jarg9, jlong jarg10, jlong jarg11) {
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  std::string arg2 ;
  std::string *arg3 = (std::string *) 0 ;
  char *arg4 = (char *) 0 ;
  int *arg5 = (int *) 0 ;
  nfrd::misc::DateTime *arg6 = (nfrd::misc::DateTime *) 0 ;
  std::string *arg7 = (std::string *) 0 ;
  std::string *arg8 = (std::string *) 0 ;
  int *arg9 = (int *) 0 ;
  bool *arg10 = (bool *) 0 ;
  bool *arg11 = (bool *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::string **)&jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = *(int **)&jarg5; 
  arg6 = *(nfrd::misc::DateTime **)&jarg6; 
  arg7 = *(std::string **)&jarg7; 
  arg8 = *(std::string **)&jarg8; 
  arg9 = *(int **)&jarg9; 
  arg10 = *(bool **)&jarg10; 
  arg11 = *(bool **)&jarg11; 
  (arg1)->UpdateUser(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_UserController_1RemoveUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->RemoveUser(arg2);
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_UserController_1GetNumberOfUsers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  result = (int)(arg1)->GetNumberOfUsers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_UserController_1GenerateUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nfdb::UserController *arg1 = (nfdb::UserController *) 0 ;
  sql::ResultSet *arg2 = 0 ;
  nfdb::User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nfdb::UserController **)&jarg1; 
  arg2 = *(sql::ResultSet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "sql::ResultSet & reference is null");
    return 0;
  } 
  result = (nfdb::User *)(arg1)->GenerateUser(*arg2);
  *(nfdb::User **)&jresult = result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

