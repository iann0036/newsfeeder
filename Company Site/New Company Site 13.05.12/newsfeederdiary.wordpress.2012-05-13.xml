<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.2" created="2012-05-13 10:39" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>News Feeder Diary</title>
	<link>http://blog.newsfeeder.co</link>
	<description></description>
	<pubDate>Sun, 13 May 2012 10:39:49 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://blog.newsfeeder.co</wp:base_site_url>
	<wp:base_blog_url>http://blog.newsfeeder.co</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>im607</wp:author_login><wp:author_email>im607@uowmail.edu.au</wp:author_email><wp:author_display_name><![CDATA[Ian Mckay]]></wp:author_display_name><wp:author_first_name><![CDATA[Ian]]></wp:author_first_name><wp:author_last_name><![CDATA[Mckay]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login>mjb932</wp:author_login><wp:author_email>mjb932@uowmail.edu.au</wp:author_email><wp:author_display_name><![CDATA[Michael Boge]]></wp:author_display_name><wp:author_first_name><![CDATA[Michael]]></wp:author_first_name><wp:author_last_name><![CDATA[Boge]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>3</wp:author_id><wp:author_login>sz653</wp:author_login><wp:author_email>needself@vip.qq.com</wp:author_email><wp:author_display_name><![CDATA[Shiwei Zhang]]></wp:author_display_name><wp:author_first_name><![CDATA[Shiwei]]></wp:author_first_name><wp:author_last_name><![CDATA[Zhang]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>4</wp:author_id><wp:author_login>ajrhb957</wp:author_login><wp:author_email>ajrhb957@uowmail.edu.au</wp:author_email><wp:author_display_name><![CDATA[Aron Hardy-Bardsley]]></wp:author_display_name><wp:author_first_name><![CDATA[Aron]]></wp:author_first_name><wp:author_last_name><![CDATA[Hardy-Bardsley]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>7</wp:term_id><wp:category_nicename>aron-hardy-bardsleys-diary</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Aron Hardy-Bardsley's Diary]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>3</wp:term_id><wp:category_nicename>ian-mckays-diary</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Ian Mckay's Diary]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>21</wp:term_id><wp:category_nicename>meeting-minutes</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Meeting Minutes]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>5</wp:term_id><wp:category_nicename>michael-boges-diary</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Michael Boge's Diary]]></wp:cat_name></wp:category>
	<wp:category><wp:term_id>6</wp:term_id><wp:category_nicename>shiwei-zhangs-diary</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Shiwei Zhang's Diary]]></wp:cat_name><wp:category_description><![CDATA[Containing the diary written by Shiwei Zhang]]></wp:category_description></wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:tag><wp:term_id>22</wp:term_id><wp:tag_slug>adminservice</wp:tag_slug><wp:tag_name><![CDATA[AdminService]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>12</wp:term_id><wp:tag_slug>back-end</wp:tag_slug><wp:tag_name><![CDATA[Back-End]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>15</wp:term_id><wp:tag_slug>boost</wp:tag_slug><wp:tag_name><![CDATA[boost]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>10</wp:term_id><wp:tag_slug>cdata</wp:tag_slug><wp:tag_name><![CDATA[CDATA]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>23</wp:term_id><wp:tag_slug>compiler</wp:tag_slug><wp:tag_name><![CDATA[compiler]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>feeditem</wp:tag_slug><wp:tag_name><![CDATA[FeedItem]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>9</wp:term_id><wp:tag_slug>image</wp:tag_slug><wp:tag_name><![CDATA[image]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>20</wp:term_id><wp:tag_slug>log</wp:tag_slug><wp:tag_name><![CDATA[log]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>16</wp:term_id><wp:tag_slug>logging</wp:tag_slug><wp:tag_name><![CDATA[logging]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>17</wp:term_id><wp:tag_slug>pathchmatch</wp:tag_slug><wp:tag_name><![CDATA[pathchmatch]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>11</wp:term_id><wp:tag_slug>rapidxml</wp:tag_slug><wp:tag_name><![CDATA[RapidXML]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>18</wp:term_id><wp:tag_slug>rss</wp:tag_slug><wp:tag_name><![CDATA[rss]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>13</wp:term_id><wp:tag_slug>rssparser</wp:tag_slug><wp:tag_name><![CDATA[RSSParser]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>19</wp:term_id><wp:tag_slug>thread</wp:tag_slug><wp:tag_name><![CDATA[thread]]></wp:tag_name></wp:tag>
	<wp:tag><wp:term_id>14</wp:term_id><wp:tag_slug>utility</wp:tag_slug><wp:tag_name><![CDATA[Utility]]></wp:tag_name></wp:tag>
	<wp:term><wp:term_id>4</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>diaries</wp:term_slug><wp:term_name><![CDATA[Diaries]]></wp:term_name></wp:term>

	<generator>http://wordpress.org/?v=3.3.2</generator>

	<item>
		<title>SSL</title>
		<link>http://blog.newsfeeder.co/?attachment_id=19</link>
		<pubDate>Wed, 07 Mar 2012 23:44:35 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/SSL.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>19</wp:post_id>
		<wp:post_date>2012-03-07 23:44:35</wp:post_date>
		<wp:post_date_gmt>2012-03-07 23:44:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ssl</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/SSL.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/SSL.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"300";s:6:"height";s:3:"300";s:14:"hwstring_small";s:22:"height='96' width='96'";s:4:"file";s:15:"2012/03/SSL.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I GOT IN!!!</title>
		<link>http://blog.newsfeeder.co/?p=34</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=34</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2012-03-13 05:51:51</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Shiwei Zhang&#039;s Diary</title>
		<link>http://blog.newsfeeder.co/?p=77</link>
		<pubDate>Tue, 20 Mar 2012 02:43:05 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[Containing the diary written by Shiwei Zhang]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2012-03-20 13:43:05</wp:post_date>
		<wp:post_date_gmt>2012-03-20 02:43:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>shiwei-zhangs-diary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="diaries"><![CDATA[Diaries]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ian Mckay&#039;s Diary</title>
		<link>http://blog.newsfeeder.co/?p=78</link>
		<pubDate>Tue, 20 Mar 2012 02:43:06 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2012-03-20 13:43:06</wp:post_date>
		<wp:post_date_gmt>2012-03-20 02:43:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ian-mckays-diary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="diaries"><![CDATA[Diaries]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Michael Boge&#039;s Diary</title>
		<link>http://blog.newsfeeder.co/?p=79</link>
		<pubDate>Tue, 20 Mar 2012 02:43:07 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2012-03-20 13:43:07</wp:post_date>
		<wp:post_date_gmt>2012-03-20 02:43:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>michael-boges-diary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="diaries"><![CDATA[Diaries]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Aron Hardy-Bardsley&#039;s Diary</title>
		<link>http://blog.newsfeeder.co/?p=80</link>
		<pubDate>Tue, 20 Mar 2012 02:43:08 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=80</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>80</wp:post_id>
		<wp:post_date>2012-03-20 13:43:08</wp:post_date>
		<wp:post_date_gmt>2012-03-20 02:43:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>aron-hardy-bardsleys-diary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="diaries"><![CDATA[Diaries]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Considering thread interaction these days...</title>
		<link>http://blog.newsfeeder.co/?p=96</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=96</guid>
		<description></description>
		<content:encoded><![CDATA[For the back-end, I am considering the thread interaction these days...

What I am considering is not the simple ones like how to create a thread or how to use a mutex. What I am considering is how to send a signal or message to another thread and what if I cancel a thread.

As we discussed in the last week]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>96</wp:post_id>
		<wp:post_date>2012-03-23 18:17:37</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<category domain="post_tag" nicename="thread"><![CDATA[thread]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oldlook</title>
		<link>http://blog.newsfeeder.co/?attachment_id=102</link>
		<pubDate>Thu, 29 Mar 2012 03:22:52 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/oldlook.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2012-03-29 14:22:52</wp:post_date>
		<wp:post_date_gmt>2012-03-29 03:22:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oldlook</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>101</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/oldlook.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/oldlook.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1366";s:6:"height";s:3:"736";s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:19:"2012/03/oldlook.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>newlook</title>
		<link>http://blog.newsfeeder.co/?attachment_id=103</link>
		<pubDate>Thu, 29 Mar 2012 03:22:54 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/newlook.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2012-03-29 14:22:54</wp:post_date>
		<wp:post_date_gmt>2012-03-29 03:22:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>newlook</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>101</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/newlook.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/newlook.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1366";s:6:"height";s:3:"728";s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:19:"2012/03/newlook.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sample.png</title>
		<link>http://blog.newsfeeder.co/?attachment_id=108</link>
		<pubDate>Thu, 29 Mar 2012 03:31:23 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/sample.png</guid>
		<description></description>
		<content:encoded><![CDATA[http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/sample.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2012-03-29 14:31:23</wp:post_date>
		<wp:post_date_gmt>2012-03-29 03:31:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sample-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/sample.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/sample.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1000";s:6:"height";s:3:"288";s:14:"hwstring_small";s:23:"height='36' width='128'";s:4:"file";s:18:"2012/03/sample.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[twentyeleven]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Newspaper_and_Glass_Sphere.jpg</title>
		<link>http://blog.newsfeeder.co/?attachment_id=109</link>
		<pubDate>Thu, 29 Mar 2012 03:34:14 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/Newspaper_and_Glass_Sphere.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/Newspaper_and_Glass_Sphere.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2012-03-29 14:34:14</wp:post_date>
		<wp:post_date_gmt>2012-03-29 03:34:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>newspaper_and_glass_sphere-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/Newspaper_and_Glass_Sphere.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/Newspaper_and_Glass_Sphere.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1000";s:6:"height";s:3:"288";s:14:"hwstring_small";s:23:"height='36' width='128'";s:4:"file";s:38:"2012/03/Newspaper_and_Glass_Sphere.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[twentyeleven]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>basic priority</title>
		<link>http://blog.newsfeeder.co/?attachment_id=116</link>
		<pubDate>Sat, 31 Mar 2012 04:45:20 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/basic-priority.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2012-03-31 15:45:20</wp:post_date>
		<wp:post_date_gmt>2012-03-31 04:45:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>basic-priority</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>115</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/basic-priority.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/basic-priority.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"558";s:6:"height";s:3:"106";s:14:"hwstring_small";s:23:"height='24' width='128'";s:4:"file";s:26:"2012/03/basic-priority.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>new priority</title>
		<link>http://blog.newsfeeder.co/?attachment_id=117</link>
		<pubDate>Sat, 31 Mar 2012 04:54:21 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/basic-priority1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2012-03-31 15:54:21</wp:post_date>
		<wp:post_date_gmt>2012-03-31 04:54:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>basic-priority-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>115</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/03/basic-priority1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/03/basic-priority1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"675";s:6:"height";s:3:"114";s:14:"hwstring_small";s:23:"height='21' width='128'";s:4:"file";s:27:"2012/03/basic-priority1.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>notifications</title>
		<link>http://blog.newsfeeder.co/?attachment_id=134</link>
		<pubDate>Tue, 03 Apr 2012 03:15:46 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/wp-content/uploads/2012/04/notifications.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2012-04-03 14:15:46</wp:post_date>
		<wp:post_date_gmt>2012-04-03 03:15:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>notifications</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>133</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/04/notifications.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/04/notifications.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"500";s:6:"height";s:3:"134";s:14:"hwstring_small";s:23:"height='34' width='128'";s:4:"file";s:25:"2012/04/notifications.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>T-Shirts!</title>
		<link>http://blog.newsfeeder.co/?p=136</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[As an idea for a gimmick for the trade show, it was suggested that customized t-shirts would entice viewers to the particular stall.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2012-04-03 14:56:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://blog.newsfeeder.co/?p=159</link>
		<pubDate>Wed, 04 Apr 2012 12:43:11 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=159</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>159</wp:post_id>
		<wp:post_date>2012-04-04 23:43:11</wp:post_date>
		<wp:post_date_gmt>2012-04-04 12:43:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>159</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>5</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="diaries"><![CDATA[Diaries]]></category>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>adding content</title>
		<link>http://blog.newsfeeder.co/?attachment_id=248</link>
		<pubDate>Fri, 06 Apr 2012 08:25:32 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/wp-content/uploads/2012/04/adding-content.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2012-04-06 19:25:32</wp:post_date>
		<wp:post_date_gmt>2012-04-06 08:25:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adding-content</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>247</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/04/adding-content.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/04/adding-content.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"883";s:6:"height";s:3:"636";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:26:"2012/04/adding-content.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>new sheet</title>
		<link>http://blog.newsfeeder.co/?attachment_id=249</link>
		<pubDate>Fri, 06 Apr 2012 08:25:35 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-sheet.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2012-04-06 19:25:35</wp:post_date>
		<wp:post_date_gmt>2012-04-06 08:25:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-sheet</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>247</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-sheet.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/04/new-sheet.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"883";s:6:"height";s:3:"636";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:21:"2012/04/new-sheet.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>new template</title>
		<link>http://blog.newsfeeder.co/?attachment_id=250</link>
		<pubDate>Fri, 06 Apr 2012 08:25:37 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-template.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2012-04-06 19:25:37</wp:post_date>
		<wp:post_date_gmt>2012-04-06 08:25:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-template</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>247</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-template.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/04/new-template.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"883";s:6:"height";s:3:"636";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:24:"2012/04/new-template.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>express-setup.xml_.txt</title>
		<link>http://blog.newsfeeder.co/?attachment_id=284</link>
		<pubDate>Sun, 13 May 2012 10:39:14 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/wp-content/uploads/2012/05/express-setup.xml_.txt</guid>
		<description></description>
		<content:encoded><![CDATA[http://blog.newsfeeder.co/wp-content/uploads/2012/05/express-setup.xml_.txt]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2012-05-13 21:39:14</wp:post_date>
		<wp:post_date_gmt>2012-05-13 10:39:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>express-setup-xml_-txt</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>http://blog.newsfeeder.co/wp-content/uploads/2012/05/express-setup.xml_.txt</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[import]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[2012/05/express-setup.xml_.txt]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Database Controller Problems</title>
		<link>http://blog.newsfeeder.co/?p=3</link>
		<pubDate>Wed, 07 Mar 2012 23:36:02 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[Last night I spent quite some time debugging the Database Controller, to no avail. The problem is, that currently the controller will support only a maximum of one WHERE criterion in the SQL statement being executed. Will continue to attempt to solve this problem.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2012-03-07 23:36:02</wp:post_date>
		<wp:post_date_gmt>2012-03-07 23:36:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>database-controller-problems</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hello, World</title>
		<link>http://blog.newsfeeder.co/?p=7</link>
		<pubDate>Mon, 27 Feb 2012 08:26:15 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[I have created this Wordpress website to allow the developers of the News Feeder system to log their progress.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2012-02-27 08:26:15</wp:post_date>
		<wp:post_date_gmt>2012-02-27 08:26:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hello-world-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SSL Implemented</title>
		<link>http://blog.newsfeeder.co/?p=15</link>
		<pubDate>Thu, 01 Mar 2012 02:31:24 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=15</guid>
		<description></description>
		<content:encoded><![CDATA[After consulting with Luke, we decided that SSL implementation would be a significant addition to the project. After browsing online, I managed to find the cheapest SSL certificate around. There were some teething problems during the installation of the SSL certificate, but with a bit of brute force, I managed to install it properly. The team and I are still deciding on the best way to implement it (i.e. by default or not).

<a href="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/SSL.png"><img class="alignnone size-full wp-image-17" title="SSL" src="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/SSL.png" alt="" width="300" height="375" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>15</wp:post_id>
		<wp:post_date>2012-03-01 02:31:24</wp:post_date>
		<wp:post_date_gmt>2012-03-01 02:31:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ssl-implemented</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moving from nbs.im</title>
		<link>http://blog.newsfeeder.co/?p=22</link>
		<pubDate>Wed, 07 Mar 2012 23:59:19 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[Since this site has been set up, all my diaries will be written here instead of blog.nbs.im at <a title="News Feeder diary" href="http://blog.nbs.im/?cat=54">http://blog.nbs.im/?cat=54</a>

Old diaries can be found in the above link, although there are not many diaries.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2012-03-08 10:59:19</wp:post_date>
		<wp:post_date_gmt>2012-03-07 23:59:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moving-from-nbs-im</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New attribute is added to the FeedItem</title>
		<link>http://blog.newsfeeder.co/?p=26</link>
		<pubDate>Sun, 11 Mar 2012 12:15:27 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[When I was re-writing the code of FeedParser related stuffs tonight, a new attribute "ImageList" is added to the interface class FeedItem.

This attribute is added for meeting the database design that one feed item can have many images.

Details please see back-end:
const std::list<std::string>& parser::FeedItem::GetImageList() const;
bool parser::FeedItem::HasImageList() const;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2012-03-11 23:15:27</wp:post_date>
		<wp:post_date_gmt>2012-03-11 12:15:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-attribute-is-added-to-the-feeditem</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="feeditem"><![CDATA[FeedItem]]></category>
		<category domain="post_tag" nicename="image"><![CDATA[image]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Yesterdays Meeting</title>
		<link>http://blog.newsfeeder.co/?p=35</link>
		<pubDate>Mon, 12 Mar 2012 18:59:55 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=35</guid>
		<description></description>
		<content:encoded><![CDATA[Up at 5 am this morning (in Sydney today). Was thinking about the meeting we had yesterday and how productive it was, just writing an email now to propose some agenda for next meeting.

In the meeting yesterday we discussed our projects iterations and the design of the backend.Its good to see that people are reluctant to change the design of the front-end and backend, when a developer is proud of their work they are motivated.

In the design of the backend, I have explained the threading model and as a team we went through the class design of the backend and how those classes will interact with each other. Hopefully we can get some diagramming done and then begin the "final product" version of the backend. Next week we can review the front end design.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>35</wp:post_id>
		<wp:post_date>2012-03-13 05:59:55</wp:post_date>
		<wp:post_date_gmt>2012-03-12 18:59:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yesterdays-meeting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Currently, cannot parse CDATA data with RapidXML</title>
		<link>http://blog.newsfeeder.co/?p=38</link>
		<pubDate>Wed, 14 Mar 2012 13:32:24 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[At the back-end, I have successfully accessed the online RSS feed with the cURL easy api and pass it to the rapidxml which is pretty good.

However, in the testing progress, CDATA data is not parsed with RapidXML. No errors, but it skipped the data. Currently, I am trying to set up flags to make it work but still not found any solutions yet.

If any one knows that, please help us :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2012-03-15 00:32:24</wp:post_date>
		<wp:post_date_gmt>2012-03-14 13:32:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>currently-cannot-parse-cdata-data-with-rapidxml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="post_tag" nicename="cdata"><![CDATA[CDATA]]></category>
		<category domain="post_tag" nicename="rapidxml"><![CDATA[RapidXML]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-03-15 01:31:05</wp:comment_date>
			<wp:comment_date_gmt>2012-03-14 14:31:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This problem is solved by RapidXML finally works on CDATA (http://newsfeeder.co/wordpress/?p=41)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>RapidXML finally works on CDATA</title>
		<link>http://blog.newsfeeder.co/?p=41</link>
		<pubDate>Wed, 14 Mar 2012 14:17:25 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=41</guid>
		<description></description>
		<content:encoded><![CDATA[Solution to: <a title="Currently, cannot parse CDATA data with RapidXML" href="http://newsfeeder.co/wordpress/?p=38">CDATA problem of RapidXML</a>

The RapidXML actually creates a node_cdata node under the current node (note: do not set up parse_no_data_nodes flag to parse()). Hence, the current node does not contain anything but its child node does.

For example:
<pre> &lt;description&gt;&lt;![CDATA[hello world]]&gt;&lt;/description&gt;</pre>
The "description" node does not contain the data "hello world". Its child node do contain the data but the child node does not have a node name. <!--more--> Here's the sample code:
<pre lang="cpp" line="1">// Author Name:	Shiwei Zhang
// Modification Date:	17/03/12
// File Description:	Print RSS Feed of blog.nbs.im using curl & RapidXML
#include <iostream>
#include <curl/curl.h>
#include <vector>
#include "rapidxml.hpp"
using namespace std;
using namespace rapidxml;

static size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream)
{
	char* p = (char*)ptr;
	vector<char>& data = *(vector<char>*)stream;
	int original = data.size();
	for (size_t i = 0; i < size * nmemb; i++)
			data.push_back(*p++);
	
	return data.size() - original;
}

int main()
{
	CURL *curl;
	CURLcode res;
	vector<char> body;

	curl = curl_easy_init();
	if(curl)
	{
		curl_easy_setopt(curl, CURLOPT_URL,
				 "http://blog.nbs.im/?feed=rss2");
		curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);
		curl_easy_setopt(curl, CURLOPT_FILE, &body);
		res = curl_easy_perform(curl);

		/* always cleanup */
		curl_easy_cleanup(curl);

		if (res)
		{
			cerr << "unable to connect" << endl;
			return 1;
		}
	}
	else
	{
		cerr << "unable to connect" << endl;
		return 1;
	}
	
	// Start parsering using rapidxml
	xml_document<> doc;
	doc.parse<0>(&body[0]);
	xml_node<>* cur_node = doc.first_node("rss");
	string rss_ver = cur_node->first_attribute("version")->value();
	cout << "rss version: " << rss_ver << endl;
	cur_node = cur_node->first_node("channel");
	cout << "title: " << cur_node->first_node("title")->value() << endl;
	cout << "----------------------------------------" << endl;
	xml_node<>* cur_item = cur_node->first_node("item");
	while (cur_item != 0)
	{
		cout << "title: " << cur_item->first_node("title")->value()
			<< endl;
		cout << "description: "
			<< cur_item->first_node("description")->first_node()->value() << endl;
		cout << "----------------------------------------" << endl;
		cur_item = cur_item->next_sibling();
	}

	return 0;
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2012-03-15 01:17:25</wp:post_date>
		<wp:post_date_gmt>2012-03-14 14:17:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rapidxml-finally-works-on-cdata</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="post_tag" nicename="cdata"><![CDATA[CDATA]]></category>
		<category domain="post_tag" nicename="rapidxml"><![CDATA[RapidXML]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>During Holidays</title>
		<link>http://blog.newsfeeder.co/?p=141</link>
		<pubDate>Wed, 07 Mar 2012 12:27:00 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[During the holidays no meetings were held (as our group was separated), instead we communicated mainly via emails. These points summarise our decisions made and discussions we had via these emails:
<ul>
	<li>Made the decision to use email as our group’s main communication method. This was chosen as our group was widely separated and we had no chance of face to face contact</li>
	<li><strong>Brainstorming:</strong>
<ul>
	<li>We thought of general ideas of where we wanted to go with the system</li>
	<li>Main role is to be a ‘News Feed Aggregator’ (as per the specification), as such it must be able to crawl, parse, store and display content from RSS feeds as its main functionality</li>
	<li>Decided we would be making the product as a service rather than a system (so we could focus mainly on user functionality)</li>
	<li>System could be broken down into 2 main parts, front-end for displaying the content to the user and backend for performing all the processing</li>
	<li>Discussed the technologies we should use to construct the system:
<ul>
	<li>PHP web server, accessible to the user via web pages</li>
	<li>C++ for the backend</li>
	<li>MySQL database for storing the data (MySQL was chosen as it was a cheap and simple option)</li>
</ul>
</li>
</ul>
</li>
	<li>Discussed the architecture to use for the project. Repository structure, front-end and backend talking to database which stores feed and user information</li>
	<li>Discussed possible users:
<ul>
	<li>Standard users (business people, students, general public)</li>
	<li>Administrators (for accessing the system)</li>
</ul>
</li>
	<li>Discussed the content sources we could possibly crawl:
<ul>
	<li>RSS (most importantly)</li>
	<li>Emails</li>
	<li>Forums</li>
	<li>Standard websites (HTML)</li>
	<li>Social Media (Facebook, Twitter)</li>
	<li>Weather feeds</li>
	<li>Decided our main task in the holidays would be to work on prototypes for each module of the project
<ul>
	<li>This is to both test our ideas and learn how to correctly construct the module</li>
	<li>The prototype for each section is a ‘throw-away prototype’, we will be building the final system when the session starts (and the prototype is done)</li>
	<li>Assigned some general roles for which section we would be working on:
<ul>
	<li>Ian – Front-end web development</li>
	<li>Alex – Backend parsing of RSS and other content and crawling of feeds</li>
	<li>Aron – Backend threading</li>
	<li>Michael – Algorithms for queuing and documentation</li>
</ul>
</li>
	<li>Registered Domain Name (newsfeeder.co) in preparation</li>
	<li>Created SVN to store the work and simulations done in holidays</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2012-03-07 23:27:00</wp:post_date>
		<wp:post_date_gmt>2012-03-07 12:27:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>during-holidays</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 27/2/12 (First Formal Meeting)</title>
		<link>http://blog.newsfeeder.co/?p=145</link>
		<pubDate>Wed, 07 Mar 2012 12:32:23 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports:</strong>
<ul>
	<li><strong>All</strong>
<ul>
	<li>Fleshed out requirements and refined ideas on architecture/technologies for their section/module<strong></strong></li>
	<li><strong>Ian</strong>
<ul>
	<li>Developed the initial front-end website (working login, display of dynamic content, etc)<strong></strong></li>
	<li>Tested PHP PDF generation (is working, not the most efficient method though) <strong></strong></li>
	<li>Tested Bing API for searching the internet for suitable feeds to add, works well (slow due to memory cache)<strong></strong></li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Written up RSS parser<strong></strong></li>
	<li>Currently using the library libXML (has found issues with memory leaks)<strong></strong></li>
	<li>Written up basic crawler, tested and runs quickly<strong></strong></li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Ran simulations of the priority queue. Is working on integrating them successfully with threading (and testing that)<strong></strong></li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Thought of algorithm for priority queuing<strong></strong></li>
	<li>Tested algorithm with the help of Aron’s simulations</li>
</ul>
</li>
</ul>
</li>
</ul>
<strong>Agenda:</strong>
<ul>
	<li>Completed set tasks for first week (get group, project and supervisor), all done beforehand<strong></strong></li>
	<li>Confirmed times for meetings:<strong></strong>
<ul>
	<li>4:30 Monday, after the 321 lecture<strong></strong></li>
	<li>3:30 Wednesday with Luke<strong></strong></li>
	<li>Clarify any problems/questions we had with progress during break or initial brainstorming<strong></strong>
<ul>
	<li>Marked off any implemented functionalities (e.g. login and registering)<strong></strong></li>
	<li>Added ‘Abuse Reporting Blacklist’ to requirements, this is the ability for web masters to report if the system is spamming/abusing their site<strong></strong></li>
	<li><strong></strong></li>
</ul>
</li>
	<li>Created Initial Use Cases</li>
	<li>Answered any questions on each section which had been worked on over the break:<strong></strong>
<ul>
	<li>Michael answered issue with how the priority algorithm handles initial start-up of the queue<strong></strong></li>
	<li>Alex noted concerns with libXML and about whether to use Boost or P threads. Selected Boost<strong></strong></li>
</ul>
</li>
	<li>Decided upon documentation to start:<strong></strong>
<ul>
	<li>Formalised requirements<strong></strong></li>
	<li>Use cases</li>
</ul>
</li>
	<li>Specified Ian as team leader, as he has the easiest means of communication with our supervisor Luke.</li>
	<li>Specified Michael as scribe</li>
	<li>Clarified questions to ask Luke at first meeting:
<ul>
	<li>Can we have copies of the project specification?</li>
	<li>Are we selling as a service or as a system?</li>
	<li>What do you think of development types (prototyping, agile, RUP)?</li>
	<li>Can we use VISIO?</li>
	<li>Can he purchase soft-drinks (priority Vanilla Coke)?</li>
	<li>Clarify Expectation of Time-Line.</li>
	<li>Clarify Roles.</li>
	<li>Clarify Scope.</li>
	<li>Clarify Requirements.</li>
</ul>
</li>
</ul>
</li>
</ul>
<strong>Work for next week:</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Continue testing and implementing high-level features to the front-end prototype<strong></strong></li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Work on issue with RSS memory<strong></strong></li>
	<li>Continue work on HTML parser<strong></strong></li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Implement ‘start-up’ priorities on the queuing and test<strong></strong></li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Work on creating the requirements documentation<strong></strong></li>
	<li>Documenting discussed use cases</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2012-03-07 23:32:23</wp:post_date>
		<wp:post_date_gmt>2012-03-07 12:32:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-27212-first-formal-meeting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 29/2/12</title>
		<link>http://blog.newsfeeder.co/?p=149</link>
		<pubDate>Wed, 07 Mar 2012 12:34:49 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>Went through previous questions for Luke:
<ul>
	<li><strong>Can we have copies of the project specification? </strong>Copies Given<strong></strong></li>
	<li><strong>Are we selling as a service or as a system? </strong>Either, we selected to sell as a service with possible smaller applications as systems/products<strong></strong></li>
	<li><strong>What do you think of development types (prototyping, agile, RUP)? </strong>Whatever, went with prototyping/agile method<strong></strong></li>
	<li><strong>Can we use VISIO? </strong>Yes, we will be using it for major documentation<strong></strong></li>
	<li><strong>Can he purchase soft-drinks (priority Vanilla Coke)?</strong> Possible ‘donations’</li>
	<li><strong>Clarify Expectation of Time-Line. </strong>Generally follow subject outline, already ahead in this regard<strong></strong></li>
	<li><strong>Clarify Roles. </strong>No specific roles, chose to specify areas of project to people rather than standard roles<strong></strong></li>
	<li><strong>Clarify Scope. </strong>Done<strong></strong></li>
	<li><strong>Clarify Requirements. </strong>Added some more requirements, confirmed current ones are suitable.<strong></strong></li>
</ul>
</li>
	<li>Luke brought up the following points:
<ul>
	<li>Force a print view of a feed item’s page to retrieve the additional content (so as to remove non-necessary features like advertising)</li>
	<li>Look into stress testing methods</li>
	<li>For adult content filters, look at hooking into existing browser filters</li>
	<li>Look into creating payment scheme for project:
<ul>
	<li>Pay to remove advertisements from page?</li>
	<li>Additional features?</li>
</ul>
</li>
	<li>Add localised content filtering (for example in Germany Swastikas should be censored/filtered)</li>
	<li>Add ability for users to customise sheets themselves (drag and drop interface)</li>
	<li>Formatting sheets is at much higher priority, as is directly related to the user’s experience</li>
	<li>Restrict sheet sizes (such as only 10 items per sheet)</li>
	<li>Look into restricting user privileges (limiting sheets, feeds, etc, so as to not abuse)</li>
	<li>SSL? Encrypting communications between system servers and the client</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2012-03-07 23:34:49</wp:post_date>
		<wp:post_date_gmt>2012-03-07 12:34:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-29212</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 5/3/12</title>
		<link>http://blog.newsfeeder.co/?p=153</link>
		<pubDate>Wed, 07 Mar 2012 12:38:06 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=153</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li><strong>Progress Reports</strong>
<ul>
	<li><strong>Ian</strong>:
<ul>
	<li>SSL Implemented</li>
	<li>Problem with deletion, need to add dynamic SQL generation (databaseconnection.php)</li>
</ul>
</li>
	<li><strong>Alex</strong>:
<ul>
	<li>Socket designed, in the progress of implanting</li>
	<li>Refactoring the backend</li>
</ul>
</li>
	<li><strong>Aron</strong>:
<ul>
	<li>Designed customisable UI layouts</li>
</ul>
</li>
	<li><strong>Michael</strong>:
<ul>
	<li>Designed customisable UI layouts</li>
</ul>
</li>
</ul>
</li>
	<li><strong>Agenda</strong>
<ul>
	<li>Aron and Michael discussed the ‘customisable UI layouts’ proposed by Luke
<ul>
	<li>Essentially the user can drag and drop feed types into a defined layout</li>
	<li>The layout itself is defined by dragging and resizing areas on a sheet to be filled with content</li>
	<li>To use a standard column/row type format (as is similar to standard sheets)</li>
</ul>
</li>
	<li>Added additional requirements, formally added  the ‘customisable UI layouts’  and what it entailed to the requirements</li>
	<li>SSL
<ul>
	<li>Group decided it would probably be by user preference and it would default to ON<strong></strong></li>
	<li>Ask Luke for his suggestions on the security and how to implement it<strong></strong></li>
</ul>
</li>
</ul>
</li>
	<li><strong>Actions for next meeting:</strong>
<ul>
	<li><strong>Ian: </strong>
<ul>
	<li>Correct any  SSL issues and get prepare questions to ask Luke about the issues</li>
</ul>
</li>
	<li><strong>Alex:</strong>
<ul>
	<li>Continue working on Parsers (especially HTML parsing)</li>
</ul>
</li>
	<li><strong>Aron:</strong>
<ul>
	<li>Test threading in regards to the crawler more thoroughly (compare more threads vs fewer threads)</li>
</ul>
</li>
	<li><strong>Michael:</strong>
<ul>
	<li>Continue writing use cases / requirements documentation</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2012-03-07 23:38:06</wp:post_date>
		<wp:post_date_gmt>2012-03-07 12:38:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-5312</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 7/3/12</title>
		<link>http://blog.newsfeeder.co/?p=160</link>
		<pubDate>Thu, 08 Mar 2012 12:46:06 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>Asked Luke about Security and SSL
<ul>
	<li>Authentication for services (such as API and downloader application)
<ul>
	<li>Given to registered users</li>
</ul>
</li>
	<li>Authentication only if we want to restrict access to registered users</li>
	<li>SSL on important data (login, registering, etc)</li>
	<li>No SSL on non-important data (its processing costs are too high to use for the whole site)
<ul>
	<li>May put it on data about user preferences</li>
	<li>Luke suggested defaulting to off instead of on</li>
</ul>
</li>
</ul>
</li>
	<li>Asked about initial documentation:
<ul>
	<li>Nothing complex for the documentation, keep simple especially for user documentation</li>
	<li>Format the requirements in table form</li>
	<li>Start a WordPress for keeping diaries</li>
	<li>Document main competitors
<ul>
	<li>Google Reader</li>
	<li>Mashable</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2012-03-08 23:46:06</wp:post_date>
		<wp:post_date_gmt>2012-03-08 12:46:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-7312</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 12/3/12</title>
		<link>http://blog.newsfeeder.co/?p=164</link>
		<pubDate>Mon, 12 Mar 2012 12:50:03 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Implemented changes suggested by Luke about SSL</li>
	<li>Found issue with PHP database connections class, currently trying to fix</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Basic HTML parser finished</li>
	<li>Begun wrapping classes</li>
	<li>Wrote up backend class diagram for discussion in this meeting</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Tested threads, more threads superior (provided we do not pool too many), performance hit is due to queue sorting</li>
	<li>Started technical documentation</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Finished initial high-level use cases</li>
	<li>Still writing up requirements documentation (working on priorities currently)</li>
</ul>
</li>
</ul>
<strong>Agenda</strong>
<ul>
	<li>Analysed the current queuing architecture:
<ul>
	<li>Is Crawler Controller getting the work from the MySQL updater or is it from the Crawler Thread? From the Crawler Thread</li>
	<li>Polling (Crawler Controller polls from database every n seconds) OR When it initialises, have it add a PLACEHOLDER item onto the queue? Decided upon Ian’s suggestion, using the placeholder</li>
	<li>Essentially when a new feed is added to the database there will be a message sent to the ‘crawler controller’ which will create a placeholder item in the queue for that new feed. This feed item will be filled in when it is first reached in the queue and crawled.</li>
</ul>
</li>
	<li>Aron and Michael explained queuing architecture to group:
<ul>
	<li>Continuous queue</li>
	<li>Passes the top X items to X waiting threads, then resorts the remaining queue after incrementing the priority</li>
	<li>Passed items are crawled in these threads and added back onto the end of the queue</li>
</ul>
</li>
	<li>Analysed Backend design (and class diagram):
<ul>
	<li>Refactored current design to fit more with the Model View Controller pattern</li>
	<li>Using thread pools for all major services (crawler, SQL, etc)</li>
	<li>General design involves running individual threads for each major service</li>
</ul>
</li>
	<li>New executable to perform the Bing API search in C++ as opposed to PHP (very low priority), currently the search is being performed very slowly (10 seconds to bring up the first result) and mem-cache is still leaking.</li>
	<li>Discussed Iterations: initial throwaway prototype where each subsystem and its features are implemented (to test if they are feasible), followed by a standard iterative development cycle where the product is fully designed.</li>
	<li>Iterations are:
<ul>
	<li>1 (Prototype):
<ul>
	<li>Get off the ground</li>
	<li>RSS Parsing</li>
	<li>Site Login</li>
	<li>Sheet Management</li>
	<li>Database connections (backend)</li>
	<li>Database connections (frontend)</li>
</ul>
</li>
</ul>
</li>
	<li>2 (Prototype):
<ul>
	<li>Threading</li>
	<li>Queuing Simulation</li>
	<li></li>
	<li>Communication between frontend and backend (was not prototyped)</li>
	<li>Interfacing with front and back ends (Marks completion of protyping)</li>
	<li>Finalise Requirements (right at end)</li>
</ul>
</li>
	<li>3
<ul>
	<li>Finalised designs</li>
	<li>Begin development of final products
<ul>
	<li>BASE REQUIREMENTS</li>
</ul>
</li>
</ul>
</li>
	<li>4
<ul>
	<li>More functionality</li>
	<li>High level documentation</li>
</ul>
</li>
	<li>5
<ul>
	<li>TESTING</li>
	<li>Bug squashing</li>
</ul>
</li>
</ul>
<strong>Actions for next meeting:</strong>
<ul>
	<li><strong>Ian </strong>
<ul>
	<li>Keep working on fixing that database controller<strong></strong></li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Refactor backend to fit with new design<strong></strong></li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Document the proposed backend redesign<strong></strong></li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Continue working on requirements<strong></strong></li>
	<li>Look into database controller with Ian</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2012-03-12 23:50:03</wp:post_date>
		<wp:post_date_gmt>2012-03-12 12:50:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-12312</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Back-end Queuing Simulation</title>
		<link>http://blog.newsfeeder.co/?p=213</link>
		<pubDate>Tue, 28 Feb 2012 08:34:34 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=213</guid>
		<description></description>
		<content:encoded><![CDATA[I have finished writing up a small simulation of the back-end to demonstrate:
<ul>
	<li>The priority algorithm (provided by Michael Boge)</li>
	<li>Queuing method and queuing performance</li>
	<li>Threading model</li>
	<li>Performance statistics</li>
</ul>
<strong>Threading Model</strong>

A main thread exists which wraps the queue and a number of worker threads exist which continuously attempt to take items from the front of the queue. Because it is the main threads responsibility to maintain the queue, every time an item is taken from (or put back onto) the queue, the main thread will check the queue to ensure it is "good", then the next worker thread can take an item off the queue. When a worker thread is finished, it is the worker threads responsibility to put the item onto the back of the queue.

You can see that the queue requires mutual access, and so locks and conditions are put in place to enforce this. Because the queue requires mutual access, this can be seen as a bottle neck of the queuing system, i have discussed this with some of the other members of the group and a suggestion to get around this was by using multiple queues. I would like to investigate this at a later date to see if this could provide any benefit, but for the time being it looks like multiple queues would require more maintenance (time spent by the application ensuring all queues are synchronized, etc) than they are worth.

I mentioned above that the main thread needs to check to ensure the queue is "good". After taking an item off or putting an item back onto the queue the queue may need to be resorted (it is a priority queue after all). Not only this, but the priority needs to be recalculated for all feeds, which could be costly. A few ideas we have to get around this include:
<ul>
	<li>Only sorting the queue after 10 items have been taken from the queue. The items at the front of the queue will most likely stay the same and even if they do not, 10 items will take 1 or 2 seconds to crawl (that is, each item will take a 1 or 2 seconds, but all 10 will run concurrently, so only 1 or 2 seconds of time should pass). This should reduce the waiting time of the worker threads.</li>
	<li>Partial queue sorting/priority re-calculation. This has not been implemented by the simulation, but if the queue is large (200,000 items) and the priority calculation is time consuming then we may need to consider doing partial priority re-calculation/sorting of the queue. For example, we could run simulations to get statistics from the queue which may say that items in the last 50% (100,000 items) of the queue might not ever reach the front 100 items of the queue within a number of priority re-calculations/sorts. This number could be used as a threshold to put off a full sort of the queue which should improve performance.</li>
	<li>Ensuring that any constant part of the queue priority calculation is calculated into a SINGLE constant when the queue item is added to the queue and not recalculated each time a sort is performed.</li>
</ul>
<div>Lots of other ideas floating around!! I think i am looking forward to writing some sort of design documentation on this.</div>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>213</wp:post_id>
		<wp:post_date>2012-02-28 19:34:34</wp:post_date>
		<wp:post_date_gmt>2012-02-28 08:34:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>back-end-queuing-simulation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sheet Layout System</title>
		<link>http://blog.newsfeeder.co/?p=219</link>
		<pubDate>Fri, 09 Mar 2012 23:46:58 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=219</guid>
		<description></description>
		<content:encoded><![CDATA[Have been designing a layout system with the team. Been through it many times, i think we may have finally agreed on something. Guess we'll see once its implemented!

P.S. more details are in the <a title="5Th of March Meeting Minutes" href="http://blog.newsfeeder.co/?p=153">5Th of March Meeting Minutes</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>219</wp:post_id>
		<wp:post_date>2012-03-10 10:46:58</wp:post_date>
		<wp:post_date_gmt>2012-03-09 23:46:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sheet-layout-system</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - Structuring</title>
		<link>http://blog.newsfeeder.co/?p=238</link>
		<pubDate>Tue, 06 Mar 2012 07:59:41 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[It has been decided that I will be writing up the meeting minutes and posting them here. So far I have been recording the minutes in a Word document, I will continue to do this to record the meetings but will upload them after I have filled in any additional meeting information some time soon afterwards . I expect to spend about 3 hours each week recording, correcting and uploading these minutes (I will do this twice each week after each meeting).

With that said, the general structure of the minutes will be:
<ul>
	<li>
<ul>
	<li>For the minutes regarding our group meetings (without Luke), where we make our development decisions:
<ul>
	<li>Progress reports – what we have been doing over the previous week</li>
	<li>Agenda – the things we discussed and the decisions we made during the meeting</li>
	<li>Actions for next meeting – these are what we will attempt to do before the meeting next week, we may differ from these depending on issues that arise during the week</li>
</ul>
</li>
	<li>For meetings with Luke, there will be a less structured minutes as we are mainly using these meetings for interacting with out ‘client’:
<ul>
	<li>Mainly focus on what we explained to Luke or the suggestions Luke gave to us</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2012-03-06 18:59:41</wp:post_date>
		<wp:post_date_gmt>2012-03-06 07:59:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-structuring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Use Cases</title>
		<link>http://blog.newsfeeder.co/?p=242</link>
		<pubDate>Sat, 10 Mar 2012 08:17:17 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=242</guid>
		<description></description>
		<content:encoded><![CDATA[Just a quick post to tell everyone I have finished the high level use case definitions we discussed (no diagrams yet, just text). Can everyone please look through the Use Cases document in the SVN to let me know what they think.

To summarise the users we discussed:

<strong>Subscribed User – </strong>The end-users of the system. They are the ones who register to the site and view feeds they have specified, via the front-end.

<strong>Administrator – </strong>Managers of the site (such as user account management) and are able to start/stop/monitor the crawlers, via the front-end.

<strong>Guest – </strong>Anonymous users that can sign-up to the site in order to become users.

<strong>Web Master – </strong>Owner of an external site that is being crawled.

<em>*Edit* We have since made changes to this list, we changed 'Subscribed User' to a user pays the subscription to the site and added a user called 'Standard User' who is signed up to the site but pays no fees.</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2012-03-10 19:17:17</wp:post_date>
		<wp:post_date_gmt>2012-03-10 08:17:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>use-cases</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Customisable Layouts Mock-up Screens</title>
		<link>http://blog.newsfeeder.co/?p=247</link>
		<pubDate>Tue, 06 Mar 2012 08:29:48 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I spent about 3 hours both brainstorming the idea of customisable layouts with Aron and drawing the following screen mock-ups. Each was drawn in paint and I will probably re-draw them in another program when we have decided upon a final design.

A screen showing how the user can create a sheet:

<a href="http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-sheet.jpg"><img class="alignnone size-full wp-image-249" title="new sheet" src="http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-sheet.jpg" alt="" width="883" height="636" /></a>

A screen showing how a user can create the standard layout for the sheet (note the use of the 'group placeholders'):

<a href="http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-template.jpg"><img class="alignnone size-full wp-image-250" title="new template" src="http://blog.newsfeeder.co/wp-content/uploads/2012/04/new-template.jpg" alt="" width="883" height="636" /></a>

A screen showing how a user can add their feeds to the sheet layout:

<a href="http://blog.newsfeeder.co/wp-content/uploads/2012/04/adding-content.jpg"><img class="alignnone size-full wp-image-248" title="adding content" src="http://blog.newsfeeder.co/wp-content/uploads/2012/04/adding-content.jpg" alt="" width="883" height="636" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2012-03-06 19:29:48</wp:post_date>
		<wp:post_date_gmt>2012-03-06 08:29:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>customisable-layouts-mock-up-screens</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SWIG Progress</title>
		<link>http://blog.newsfeeder.co/?p=271</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=271</guid>
		<description></description>
		<content:encoded><![CDATA[OK so i promised i would get some results by the end of this week.

I have got SWIG working and I have created a comprehensive README with information on the use of the new News Feeder Shared Database Library (nfdb). I will post it here for reading also:

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2012-04-27 12:08:28</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Newsfeeder Extension Requirements</title>
		<link>http://blog.newsfeeder.co/?p=51</link>
		<pubDate>Sun, 18 Mar 2012 04:48:39 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[This weekend I have been compiling the requirements talked about with Luke last Wednesday, most notably the possible extensions/addons/applications we could work on. These possible extensions are:
<ul>
	<li>Mobile Application - I have been mainly defining requirements for the site to be 'mobile supported' rather than a specific application, this is a low level requirement</li>
	<li>Java Downloaded Application - (Main focus of ideas) We are yet to decide whether or not this just pulls down PDFs or whether it is an offline version of the site, so I could not define any requirements</li>
	<li>Sheet Designer Application - this has possibly replaced a requirement to be able to design the sheet in the site UI.</li>
	<li>Image Storage - to prevent reloading images for all sheets</li>
	<li>Add Image Searching - Very low requirement, will involve implementing Google API</li>
	<li>Social Network Integration - had already been talked about, has been upgraded in priority</li>
	<li>Public API Web Service - ...</li>
	<li>Email as a Content Type - Was one of our initial ideas, so no requirement was added</li>
	<li>Email Sheets and Notifications - Has been added as a medium level requirement</li>
</ul>
I will be talking more about these extensions in the meeting on Monday and we will be deciding upon which extensions to proceed with.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2012-03-18 15:48:39</wp:post_date>
		<wp:post_date_gmt>2012-03-18 04:48:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>newsfeeder-extension-requirements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-03-18 23:34:52</wp:comment_date>
			<wp:comment_date_gmt>2012-03-18 12:34:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If we are doing mobile applications, may be I could do something on iOS platform.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>New RSSParser and Utility introduced</title>
		<link>http://blog.newsfeeder.co/?p=54</link>
		<pubDate>Sun, 18 Mar 2012 13:12:59 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=54</guid>
		<description></description>
		<content:encoded><![CDATA[Unlike the former RSSParser in former prototype, this RSSParser is implemented using RapidXML which is memory leak free guaranteed. The main problem for libxml2 (used by the former prototype) is that the memory leaks when it fails to parse an xml file. Further more, it cannot be stopped to print error messages to the screen. However, RapidXML just use exceptions to report messages and memory pool is destroyed when out of scope by taking the convenience of C++.

The new RSSParser still uses original Parser(FeedParser in former prototype) interface.

Because RapidXML only provides parse functionality, the RSSParser has to obtain the file from the network by itself. Hence, cURL is used.

Considering many parsers may need to obtain the file from the network by themselves, Utility.cpp is introduced and wrap the cURL in Utility::Read(). This file contains a namespace (not a class) that is full of functions may be used by other functions/classes. Really, there is no need to create a class that contains those functions and make them static (Does not make sense to have this unless you are using Java or C# which is pure Objected-Oriented Language).]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>54</wp:post_id>
		<wp:post_date>2012-03-19 00:12:59</wp:post_date>
		<wp:post_date_gmt>2012-03-18 13:12:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-rssparser-and-utility-introduced</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="post_tag" nicename="rssparser"><![CDATA[RSSParser]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<category domain="post_tag" nicename="utility"><![CDATA[Utility]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It seems a good practice to use boost::posix_time instead of DateTime class</title>
		<link>http://blog.newsfeeder.co/?p=61</link>
		<pubDate>Mon, 19 Mar 2012 15:00:24 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=61</guid>
		<description></description>
		<content:encoded><![CDATA[I just looked around the boost and found boost::posix_time has almost the same functionality for DateTime class.

Since the DateTime class now cannot parse timezone labels like "EST", "PST" and so on, it seems a good practice to use boost::posix_time in the final product instead of the DateTime class in the prototype.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2012-03-20 02:00:24</wp:post_date>
		<wp:post_date_gmt>2012-03-19 15:00:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>it-seems-a-good-practice-to-use-boostposix_time-instead-of-datetime-class</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="post_tag" nicename="boost"><![CDATA[boost]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>130.130.37.85</wp:comment_author_IP>
			<wp:comment_date>2012-03-20 14:28:31</wp:comment_date>
			<wp:comment_date_gmt>2012-03-20 03:28:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The boost::posix_time also cannot parse timezone correctly. Hence, the original DateTime class is maintained. Then I will add timezone support to the DateTime class using RFC822 standard. Refer to http://blog.nbs.im/?p=293]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Front-End Fixed</title>
		<link>http://blog.newsfeeder.co/?p=64</link>
		<pubDate>Mon, 19 Mar 2012 22:54:08 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=64</guid>
		<description></description>
		<content:encoded><![CDATA[Finally, the Front-End is fixed!

Turns out there were two simultaneous issues at play here. The first was a logic error regarding error handling in the initial login code. That was fairly simply enough to solve. The second issue however turned out to be a scoping issue (which I find rare in PHP).

<!--more-->The affected code is as follows:
<blockquote>$args = array();
$args[] = $paramTypeList;
for ($i=0; $i&lt;count($where_list); $i++)
$args[] = &amp;$where_list[$i];
call_user_func_array(array($stmt, 'bind_param'), $args);</blockquote>
Note that the FOR loop is an iterative loop rather than a FOREACH. This is because the FOREACH loop loses scope for it's reference elements when outside of scope. The FOR loop was used to reference the elements directly, which fixed the problem I was having.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2012-03-20 09:54:08</wp:post_date>
		<wp:post_date_gmt>2012-03-19 22:54:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>front-end-fixed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Tasklist</title>
		<link>http://blog.newsfeeder.co/?p=66</link>
		<pubDate>Mon, 19 Mar 2012 23:01:31 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=66</guid>
		<description></description>
		<content:encoded><![CDATA[<div><strong>Tasks</strong></div>
<div></div>
<div>
<ol>
	<li>Email verification for webmasters. Webmasters are not actual users ie they do not have username/password</li>
	<li>Avatar variable in user profile. getAvatar function in user class which loads from database. pass user object into accountsmanager when registering user.</li>
	<li>Check for avatar exists on register and put into database</li>
	<li><del>Rename all import to load</del></li>
	<li><del>foreaches everywhere. (Ian: watch out! this caused the scoping issue with the DatabaseController)</del></li>
	<li>Clean up inner.php</li>
	<li>Entity classes (like sheet) instead of property arrays</li>
	<li><del>Pull constants out of init and put into config.php, call config.php from init.</del></li>
	<li>Setup bug tracking</li>
	<li><del>Remove &lt;&lt;&lt; ECHO statements</del> (implemented new templating)</li>
</ol>
</div>
<strong>Bugs</strong>
<ol>
	<li><del>Fix login cookies</del></li>
	<li>Import OPML fails. Fix it</li>
	<li>Fix news feeder co. to go to company website in footer</li>
	<li><del>Fix static height on all pages</del></li>
	<li>Complete input validation</li>
	<li><del>Fix dates to work with current timezone.</del></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>66</wp:post_id>
		<wp:post_date>2012-03-20 10:01:31</wp:post_date>
		<wp:post_date_gmt>2012-03-19 23:01:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-tasklist</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Logging system/module is introduced</title>
		<link>http://blog.newsfeeder.co/?p=81</link>
		<pubDate>Fri, 23 Mar 2012 06:05:43 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[In today's meeting with Luke, we have mentioned about the logging system.

At the back-end (will be done by me), the log will currently contain error log and command log that the front-end requests.

At the front-end (will be done by Ian), the log will probably contain error log and email log.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2012-03-23 17:05:43</wp:post_date>
		<wp:post_date_gmt>2012-03-23 06:05:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logging-systemmodule-is-introduced</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="logging"><![CDATA[logging]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A few comments on RSS feed</title>
		<link>http://blog.newsfeeder.co/?p=83</link>
		<pubDate>Fri, 23 Mar 2012 06:46:54 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[Ian has introduced "patchmatch" mechanism that trace into the original html and dig out the whole content that the description of RSS feed indicates.

To eliminate mis-understanding, I will take a few comments on RSS feed item.
<!--more-->
As we all know that RSS feed is actual xml file, one of its item is described in a &lt;item&gt;&lt;/item&gt; tag. However, none of members in item tag is required but optional. Normally, it will have &lt;title&gt;&lt;/title&gt;, &lt;link&gt;&lt;/link&gt; and &lt;description&gt;&lt;/description&gt;.
For example:
<pre lang="xml"><item>
	<title>Star City</title>
	<link>
		http://liftoff.msfc.nasa.gov/news/2003/news-starcity.asp
	</link>
	<description>
	How do Americans get ready to work with Russians aboard the International Space Station? They take a crash course in culture, language and protocol at Russia's <a href="http://howe.iki.rssi.ru/GCTC/gctc_e.htm">Star City</a>.
	</description>
	<pubDate>Tue, 03 Jun 2003 09:39:21 GMT</pubDate>
	<guid>
		http://liftoff.msfc.nasa.gov/2003/06/03.html#item573
	</guid>
</item></pre>

If one of the link tag and the description tag is missing, of course, patch match cannot be applied to the item.

Patchmatch is supposed to find out the full text of the description part which is good. However, some of RSS feeds do contain the full version of the content in themselves. There is no need of Patchmatch. For example:
<pre lang="xml"><item>
		<title>Logging system/module is introduced</title>
		<link>http://newsfeeder.co/wordpress/?p=81</link>
		<comments>http://newsfeeder.co/wordpress/?p=81#comments</comments>
		<pubDate>Fri, 23 Mar 2012 06:05:43 +0000</pubDate>
		<dc:creator>Shiwei Zhang</dc:creator>
				<category><![CDATA[Shiwei Zhang's Diary]]></category>
		<category><![CDATA[logging]]></category>

		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=81</guid>
		<description><![CDATA[In today&#8217;s meeting with Luke, we have mentioned about the logging system. At the back-end (will be done by me), the log will currently contain error log and command log that the front-end requests. At the front-end (will be done &#8230; <a href="http://newsfeeder.co/wordpress/?p=81">Continue reading <span class="meta-nav">&#8594;</span></a>]]></description>
			<content:encoded><![CDATA[<p>In today&#8217;s meeting with Luke, we have mentioned about the logging system.</p>
<p>At the back-end (will be done by me), the log will currently contain error log and command log that the front-end requests.</p>
<p>At the front-end (will be done by Ian), the log will probably contain error log and email log.</p>
]]></content:encoded>
			<wfw:commentRss>http://newsfeeder.co/wordpress/?feed=rss2&#038;p=81</wfw:commentRss>
		<slash:comments>0</slash:comments>
</item></pre>

In the "content:encoded" tag, the rss feed do contain the full text.
<del datetime="2012-03-23T06:55:03+00:00">This RSS feed is generated by Wordpress but in the file it does not show it is generated by Wordpress.</del> Although we have discussed something in the meeting, including the configuration and learning mechanism, I am still not sure which method the back-end will use :(

Extra: About the RSSParser in the Back-end now
<del datetime="2012-03-23T06:55:03+00:00">What the RSSParser does now is:
1. find the description
	If found, use as the content part.
2. find the content:encoded
	If found, use as the content part.
	If not found, keep description as the content part.</del>

Further, the second feed item above use "dc:creator" rather than "author" as the author tag. <del datetime="2012-03-23T07:09:44+00:00">The "dc:creator" tag is not handled by the RSSParser now... I will support later as soon as possible.</del>

What the RSSParser does now is:
Try to find "content:encoded" tag first. If not found, then try to find "description" tag.
For author part, it is almost the same. Find "dc:creator" first, then "author".]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2012-03-23 17:46:54</wp:post_date>
		<wp:post_date_gmt>2012-03-23 06:46:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>a-little-comment-on-rss-feed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="pathchmatch"><![CDATA[pathchmatch]]></category>
		<category domain="post_tag" nicename="rss"><![CDATA[rss]]></category>
		<category domain="post_tag" nicename="rssparser"><![CDATA[RSSParser]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a6f3491c64751c47f387ce10cf3a26ce</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8cdc03cc8ce4012a7e9a122b42cf08d5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Ian Mckay]]></wp:comment_author>
			<wp:comment_author_email>im607@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.130.37.84</wp:comment_author_IP>
			<wp:comment_date>2012-03-29 14:39:47</wp:comment_date>
			<wp:comment_date_gmt>2012-03-29 03:39:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IMHO, the Patch-Match algorithm will be one of our greatest challenges in this project]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-03-30 23:27:37</wp:comment_date>
			<wp:comment_date_gmt>2012-03-30 12:27:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[To make one work is easy... But it is really a challenge to make it prefect~]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Non-Functional Requirements</title>
		<link>http://blog.newsfeeder.co/?p=99</link>
		<pubDate>Mon, 26 Mar 2012 09:54:31 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[In the meeting today we discussed the non-functional requirements for the system. This weekend I had put about 2 hours into thinking of requirements. Basic requirements were simple to think of and due to the meeting have been fleshed out. The requirements included:
<ul>
	<li>Stability</li>
	<li>Accessibility (OS and Browser)</li>
	<li>Ease of Use</li>
	<li>Training/Help</li>
	<li>...</li>
</ul>
Myself and the others hit a problem with thinking of non-functional requirements for performance. The problem was that requirements are usually 'metrics' with defined values. Unfortunately in terms of our system's performance it is very much dependant on the hardware, network connection and number of items/users. This coupled with the fact we have not yet fully tested the system means we have no real idea what kind of performance we can achieve. For now I have used values based on standard web performance (in terms of similar products) and what we think is obtainable.

Perhaps the performance should not be specifically a requirement but more of a 'promise', perhaps generalising it to how it will perform in most situations? I will ask Luke about this on Wednesday.

Boge]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2012-03-26 20:54:31</wp:post_date>
		<wp:post_date_gmt>2012-03-26 09:54:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>non-functional-requirements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>New UI</title>
		<link>http://blog.newsfeeder.co/?p=101</link>
		<pubDate>Thu, 29 Mar 2012 03:24:15 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[Today I finished the development of the new look front end. It features a completely new look and new interactive elements to enhance the experience. The new look is being created using the Smarty templating engine. Implementation of the system proved challenging but overall I believe the new look was defiantly worth the effort.

Here is a comparison of the interfaces.

<!--more-->

<strong>Old Look:</strong>

<a href="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/oldlook.png"><img class="alignnone size-full wp-image-102" title="oldlook" src="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/oldlook.png" alt="" width="1366" height="736" /></a>

<strong>New Look:</strong>

<a href="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/newlook.png"><img class="alignnone size-full wp-image-103" title="newlook" src="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/newlook.png" alt="" width="1366" height="728" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2012-03-29 14:24:15</wp:post_date>
		<wp:post_date_gmt>2012-03-29 03:24:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>new-ui</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Trade off in Logging system?</title>
		<link>http://blog.newsfeeder.co/?p=112</link>
		<pubDate>Fri, 30 Mar 2012 13:02:20 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=112</guid>
		<description></description>
		<content:encoded><![CDATA[Aha, Logging system at Back-End was implemented yesterday.

I think it is working in a magic way with magic code :)

It will output 3 kinds of logs to a log file which is specified by the config file. The 3 type of logs are error [ERR], normal [LOG], warning [WRN]. Error log is generated when an error is found and it makes the module crash (Fatal error will make the whole back-end process crash). Warning log is generated when an error is found but it will not make the module crash (however, may behave as default, not as specified by user). Normal log is generated for routine function calls or procedures.

Each error log will be generated by associated module(threads). However, every thread have to wait for the I/O (system call) of the log file. To improve the performance, I make the log time is calculated in threads, not in the critical section. (That is the way how back-end works now) This may cause the timestamp in the log file is not in ordered. (Auditors can make it in order :) )

Nevertheless, here is another solution but not implemented yet. The modules in threads send log messages to logging system and then logging system catches messages and save to its buffer. Then writes its buffer in its own thread. However, when it improves the performance, another 2 problems are found. One is the buffer. If the buffer is not fixed, it will grow and grow. Finally, out of memory :(. If the buffer is fixed, when it is full, threads have to wait to the buffer again. Another problem is the logs may be not written to the log file when the system crashes because the logs are in the buffer. The maintenance people may be confused when they are checking the logs when an error makes the whole system crash.

So...what do you guys think? Which method is better? or just keep what we have now?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>112</wp:post_id>
		<wp:post_date>2012-03-31 00:02:20</wp:post_date>
		<wp:post_date_gmt>2012-03-30 13:02:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>trade-off-in-logging-system</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="post_tag" nicename="log"><![CDATA[log]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>130.130.37.84</wp:comment_author_IP>
			<wp:comment_date>2012-04-05 17:55:18</wp:comment_date>
			<wp:comment_date_gmt>2012-04-05 06:55:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Currently we are storing all logs in one file. Unless we can show or prove there is a significant advantage of having multiple log files, we keep logging in one file.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>9</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Ian Mckay]]></wp:comment_author>
			<wp:comment_author_email>im607@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>220.233.115.202</wp:comment_author_IP>
			<wp:comment_date>2012-03-31 12:31:59</wp:comment_date>
			<wp:comment_date_gmt>2012-03-31 01:31:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Is it the overall write functionality that's the problem, or the fact that they are fighting over a single log file? Why don't you have separate log files per module then the logs can be aggregated when requested?

A memory buffer is OK, but what happens if you have a LOG buffer that gets lost on a fatal crash. The log files won't help because the buffer with the most recent messages get thrown away.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-03-31 13:21:44</wp:comment_date>
			<wp:comment_date_gmt>2012-03-31 02:21:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Fighting over a single log file is the same as fighting over separate log files on a single machine... If we have a distributed system, it seems a good idea. Is our scope a distributed system or just 3 server machines?

For the memory buffer, I abandoned it because we all think it may be lost on a fatal crash.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>7</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Boge]]></wp:comment_author>
			<wp:comment_author_email>mjb932@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.44.129.3</wp:comment_author_IP>
			<wp:comment_date>2012-04-01 20:14:53</wp:comment_date>
			<wp:comment_date_gmt>2012-04-01 09:14:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree with the decision not to use the memory buffer (no point if can't write out when the program errors...).
As for the modules calculating the timestamp, that's fine since it will be relevant to that module anyway, but we should probably look into a way of ordering the log files ordered.
Also, quick question, are we storing all logs in one file? Or will the go into a specific log file depending on what type they are (err, wrn, log)?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Queue Priority Calculations</title>
		<link>http://blog.newsfeeder.co/?p=115</link>
		<pubDate>Sat, 31 Mar 2012 04:56:54 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=115</guid>
		<description></description>
		<content:encoded><![CDATA[Thought I should probably put up the priority algorithm since it didn't get transferred in the email and because I made some design changes this week.

Firstly, the basis of the algorithm goes:

<a href="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/basic-priority.jpg"><img class="alignnone size-full wp-image-116" title="basic priority" src="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/basic-priority.jpg" alt="" width="558" height="106" /></a>

This is what we will initially use for the algorithm (simple I know, but we are adding onto it), it has been tested using Aron's threading solution. The updated algorithm adds a 'Priority Constant' which is calculated for that feed item only a few times and is not incremented by the queue. The constant will be calculated by a separate function so we can change it anywhere down the line. The Priority constant itself will never be less than 1.

This week I spent about an hour thinking of the variables that could be used to calculate the constant, namely:
<ul>
	<li>Number of users with feed (note that pay subscription users will count as say 2 users instead of one for free users)</li>
	<li>Feed type, this will be either user feed (lowest), standard feed (added by admins as default feed, medium), first crawl (run only once the first time the feed is queued, has a VERY VERY VERY high increase in priority, to ensure it is crawled immediately after being added)</li>
	<li>...</li>
</ul>
The new algorithm is:

<a href="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/basic-priority1.jpg"><img class="alignnone size-full wp-image-117" title="new priority" src="http://newsfeeder.co/wordpress/wp-content/uploads/2012/03/basic-priority1.jpg" alt="" width="675" height="114" /></a>

If you guys can think of any other variables to add to the priority constant please let me know.

Boge

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>115</wp:post_id>
		<wp:post_date>2012-03-31 15:56:54</wp:post_date>
		<wp:post_date_gmt>2012-03-31 04:56:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>queue-priority-calculations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SQL Problems</title>
		<link>http://blog.newsfeeder.co/?p=120</link>
		<pubDate>Sat, 31 Mar 2012 14:13:40 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=120</guid>
		<description></description>
		<content:encoded><![CDATA[After much investigation into why my DatabaseConnector class was not working it turns out it was not my fault at all. In our `users` table in the SQL database we have an ssl field. However when performing this query:
<blockquote><span style="font-family: 'courier new', monospace;">UPDATE users SET ssl = '0' WHERE username = 'iann0036'</span></blockquote>
I received this error
<blockquote><span style="font-family: 'courier new', monospace;">#1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'ssl = '0' WHERE username = 'iann0036'' at line 1</span></blockquote>
<div></div>
<div>Solution? Change the schema renaming ssl to another field name. A quick fix for hours of annoying debugging.</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2012-04-01 01:13:40</wp:post_date>
		<wp:post_date_gmt>2012-03-31 14:13:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sql-problems</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 14/3/12</title>
		<link>http://blog.newsfeeder.co/?p=170</link>
		<pubDate>Fri, 16 Mar 2012 12:56:32 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>Discussed backend redesign with Luke, explained queuing method. No problems found</li>
	<li>Luke suggested we summarise our possible applications and addons:
<ul>
	<li>Mobile Application – specific interface to browse feeds
<ul>
	<li>Mobile support better option?</li>
</ul>
</li>
	<li>Java Download Application
<ul>
	<li>Browser Addin or Desktop Application? Desktop Application</li>
	<li>Main requirement: lets you view sheets offline</li>
	<li>PDF or Offline Sheets</li>
	<li>End of session</li>
</ul>
</li>
	<li>Sheet Designer Application</li>
	<li>Storing Images</li>
	<li>Add Image Searching</li>
	<li>Social Network Integration</li>
	<li>Public API Web Service</li>
	<li>Pulling down email content (additional content type)</li>
	<li>Email Notifications</li>
	<li>Emailing sheets</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2012-03-16 23:56:32</wp:post_date>
		<wp:post_date_gmt>2012-03-16 12:56:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-14312</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 19/3/11</title>
		<link>http://blog.newsfeeder.co/?p=179</link>
		<pubDate>Tue, 20 Mar 2012 14:15:14 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=179</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Database controller still broken, currently working on it</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Backend refactoring going well</li>
	<li>RSS parser and RapidXML implemented (RapidXML not leaking so far)</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Architecture documentation begun</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Initial requirements done, looking for approval</li>
</ul>
</li>
</ul>
<strong>Agenda</strong>
<ul>
	<li>Discussed the possible extensions suggested last week, and whether we would do them:
<ul>
	<li>YES OR NO (or wait till later to decide)
<ul>
	<li>Mobile Application -<strong> very very low for individual application</strong>
<ul>
	<li>Should we just have mobile support instead? <strong>YES we will provide mobile style support</strong></li>
	<li>Java Downloaded Application <strong>Yes, will confirm the functionality at a later date</strong>
<ul>
	<li>PDFs or Offine? <strong>Not yet decided</strong></li>
	<li>Sheet Designer Application <strong>Definitely Not (already done in UI)</strong>
<ul>
	<li>Is currently being done in UI should we add specific application?</li>
</ul>
</li>
	<li>Image Storage  <strong>Could be done, have to do tests on storage</strong></li>
	<li>Image Searching <strong>Definitely Not</strong></li>
	<li>Social Network Integration <strong>Yes</strong>
<ul>
	<li>What does this entail?
<ul>
	<li>Authenticating using apps and logons <strong>Yes</strong></li>
	<li>Adding social network content <strong>Yes</strong></li>
</ul>
</li>
</ul>
</li>
	<li>Public API Web Service <strong>Yes if we can get the Java App done, since it will use the service</strong>
<ul>
	<li>Why and for what cases?
<ul>
	<li>REST API</li>
	<li>Already being done for Java Downloaded app</li>
</ul>
</li>
</ul>
</li>
	<li>Email as Content Type   <strong>VERY LOW</strong></li>
	<li>Email Sheets and Notifications   <strong>YES</strong></li>
	<li>Notifications <strong>YES</strong>, Articles sent as PDFs? <strong>YES</strong>
<ul>
	<li>User confirmed: Do you want to send notifications? If yes, Do you want to send a PDF copy of the article also sent?</li>
	<li>Batch emails (Digest)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
	<li>Looked into Front End Design:
<ul>
	<li>Major suggestion was the change to Smarty templating, to replace the GUI maker class currently being used, Ian is looking into this</li>
	<li>Site Structure – fine, similar to other services</li>
	<li>Classes – basic name changes, removal of init.php, change to Smarty</li>
	<li>UI – not discussed</li>
	<li>Sheets – not discussed</li>
	<li>Custom Sheet Design – not to be discussed until better defined</li>
</ul>
</li>
</ul>
<strong>Actions for next week:</strong>
<ul>
	<li><strong>Ian:</strong>
<ul>
	<li>Keep working on fix to database connections</li>
	<li>Look into Smarty templating</li>
</ul>
</li>
	<li><strong>Alex:</strong>
<ul>
	<li>Keep refactoring backend<strong></strong></li>
	<li>Test RapidXML further<strong></strong></li>
</ul>
</li>
	<li><strong>Aron:</strong>
<ul>
	<li>Look for Smarty guidelines to use for project<strong></strong></li>
</ul>
</li>
	<li><strong>Michael:</strong>
<ul>
	<li>Add new applications into the requirements</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2012-03-21 01:15:14</wp:post_date>
		<wp:post_date_gmt>2012-03-20 14:15:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-19311</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 23/3/12</title>
		<link>http://blog.newsfeeder.co/?p=182</link>
		<pubDate>Thu, 22 Mar 2012 14:16:40 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>Ian has fixed issue with database controller, was an issue with scoping of for loops and some SQL queries</li>
	<li>Short meeting with Luke, on Friday instead of Wednesday</li>
	<li>Alex brought up the issue of logging:
<ul>
	<li>Only errors currently being written to log file</li>
	<li>Should implement verbose logging</li>
	<li>Luke suggested we provide auditing</li>
</ul>
</li>
	<li>Showed Luke our requirements document:
<ul>
	<li>Suggested rearrange requirements based on relation to other requirements rather than their priority</li>
	<li>Added some additional requirements:
<ul>
	<li>Logging and Auditing</li>
	<li>Learning Algorithm (very low)</li>
	<li>Printing support</li>
	<li>Payment system</li>
	<li>Feed categories</li>
	<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2012-03-23 01:16:40</wp:post_date>
		<wp:post_date_gmt>2012-03-22 14:16:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-23312</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes – 26/3/12</title>
		<link>http://blog.newsfeeder.co/?p=186</link>
		<pubDate>Mon, 26 Mar 2012 14:19:32 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Begun conversion to Smarty (needs Aron’s help to choose a templating style)</li>
	<li>Found new design template to use for the front-end look</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Finished refactoring backend to fit with design documents</li>
	<li>Added more functionality to RSS parser (can now handle more tags to retrieve the correct information)</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Found his old Smarty Templating guidelines, had fixed some issues with them to fit with the new project</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Added additional requirements suggested by Luke to documents</li>
</ul>
</li>
</ul>
<strong>Agenda</strong>
<ul>
	<li>Chosen Smarty Templating Style</li>
	<li>Backend Requirements Finalizing</li>
	<li>Michael explained Priority Algorithm to Alex, to be implemented into the crawler</li>
	<li>Made decision to use Ian’s new design template
<ul>
	<li>More professional</li>
	<li>Provides additional JavaScript functionality the old template did not have</li>
</ul>
</li>
	<li>Implemented smarty naming convention</li>
	<li>UI design style
<ul>
	<li>Boxes to hold articles</li>
	<li>Similar to the customised sheet design style (placeholders using Smarty to fill)</li>
	<li>Discussed priorities for requirements, moved some applications to low, and functionality to medium</li>
</ul>
</li>
</ul>
<strong>Actions for next meeting</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Convert frontend to use the new smarty template<strong></strong></li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Implement the crawler queue with priority into the backend crawler<strong></strong></li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Look into REST API’s for the Downloader Application</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Work on next iteration of priority algorithm</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2012-03-27 01:19:32</wp:post_date>
		<wp:post_date_gmt>2012-03-26 14:19:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>186</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>API Web Service</title>
		<link>http://blog.newsfeeder.co/?p=204</link>
		<pubDate>Sun, 01 Apr 2012 01:00:50 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[Spent some time this morning looking at what we would need to get a java web service up and running (Java Metro stack). From a design perspective, I believe the web service should be a separate sub system. Having had experience with developing web services and web applications, the web service has always been developed separately from the web application, the reason for this is to allow separation.

That is, If the API web service was made public, then having the web service on its own server/cluster would make sense. The web service would have a different audience from the web application and if the web service was integrated with the web application, then users on the site could potentially see performance degradation due to users of the API having to share the same resources.

From a development and maintenance perspective, splitting out the web service into its own project would prevent bloating of the website, also if support for the API web service was discontinued, this would not require any modification/downtime to the website as the API web service would be separated completely.

Similar issues would arise if the API web service was integrated into the back-end as a module. Typically a web service would use an xml/soap/rest interface. If developing in the backend, instead of having a well established web server like apache (etc) handling multiple connections/resources we would have to open a port in the backend, create our own protocol and begin accepting connections. While this method might work for our own applications, this would limit us from ever making the API public and would also have a number of possible security issues opening us up to hacking attempts etc. Note that the separation issues still apply here, discontinuation/maintenance/bloating/back-end performance etc.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2012-04-01 12:00:50</wp:post_date>
		<wp:post_date_gmt>2012-04-01 01:00:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>api-web-service</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Downloader Application</title>
		<link>http://blog.newsfeeder.co/?p=210</link>
		<pubDate>Fri, 16 Mar 2012 09:00:54 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to express my opinion on the downloader application.

Firstly, we all agreed as a group to develop the application in java. We have unofficially named it the "Java Downloader Application" however this should not be in the requirements because Java is an implementation detail and not a requirement. The choice of java was obvious as it makes it cross-platform and available to a bigger audience.

I do not think that the downloader application is a high level requirement as it will end up effectively duplicating some of the functionality provided by the website, i think the big positives are:
<ul>
	<li>Providing an offline tool for viewing cached content from the website</li>
	<li>Possibly providing a better method of notifying the user of new content (for example, task tray icon which pops up notifications etc)</li>
</ul>
These positives may seem marginal to some users, so I think that is exactly why we need to make this downloader application as appealing as possible. This means a nice user experience including: a smooth install process (possibly a 1 click installer from the website), not hogging too much resources, not being annoying, not spamming the user.

I envision the downloader application as something which would sit in the tray and when opened would allow the user to view a sheet. Although we could develop this application to just download and cache PDF files of sheets, this is limited (ie, why not have this functionality AND more?). When the user has the application open, they will see their sheet in roughly the same layout as they would on the website. To achieve this, the application would contact the API web service and pull down the layout and view details of the sheet which specify:
<ul>
	<li>Where content placeholders sit in the sheet</li>
	<li>What is in the content placeholders (content)</li>
	<li>What preferences the user has set on the content like feeds, item limits, show item heading/body/description/image etc</li>
</ul>
This information should be the same information the website would use to render the sheet to the user, and the downloader application would use the same method of rendering which in theory should give the same user experience but since things will be cached in the downloader application, the user won't need to be connected to the internet to browse through their news sheets!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2012-03-16 20:00:54</wp:post_date>
		<wp:post_date_gmt>2012-03-16 09:00:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>downloader-application</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vanilla Coke</title>
		<link>http://blog.newsfeeder.co/?p=217</link>
		<pubDate>Thu, 15 Mar 2012 01:07:49 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=217</guid>
		<description></description>
		<content:encoded><![CDATA[I hope we get that fridge in the project room.......

Sponsorship of Vanilla Coke would be muchly appreciated Luke!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>217</wp:post_id>
		<wp:post_date>2012-03-15 12:07:49</wp:post_date>
		<wp:post_date_gmt>2012-03-15 01:07:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vanilla-coke</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 28/3/12</title>
		<link>http://blog.newsfeeder.co/?p=225</link>
		<pubDate>Thu, 29 Mar 2012 02:35:45 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>
<ul>
	<li>Discussed possible properties for the sheet and sheet view:
<ul>
	<li>Font size (for readability purposes)</li>
	<li>Font colour</li>
	<li>Background colour</li>
	<li>Header colour</li>
	<li>Generic sheet icon (or header) VS a custom sheet icon</li>
	<li>Could possibly restrict the colour options of non-subscription users (for example they might only be able to use black text)</li>
</ul>
</li>
	<li>Made the decision not to use tokens, as it is a subscription service not one where users pay for pieces of extra functionality
<ul>
	<li>Also going implement a payment gate for users to buy their subscription</li>
	<li>Luke explained tokens were only suggested if we didn’t want to implement an actual payment method. He said decision was fine, though a low priority</li>
</ul>
</li>
	<li>Luke added the requirement of administrators being able to manage these subscriptions</li>
	<li>We explained to Luke the notifications system and how it would work on the sheets.
<ul>
	<li>Luke said was good functionality, especially the ability to email notifications</li>
	<li>Told us to change the actual sheet notifications from a medium to low priority</li>
</ul>
</li>
	<li>Went through requirements document with Luke, he made the following suggestions:
<ul>
	<li>Add a category explanation in the glossary</li>
	<li>Add a glossary diagram to show how the items, feeds and sheets interact with each other (1 sheet may contain many feeds, etc)</li>
	<li>Told us to split the non-functional requirement ‘Sustainability’ into 3:
<ul>
	<li>Sustainability – if the system can maintain itself (clearing logs, etc)</li>
	<li>Maintainability – how easy it is for someone to come and fix part of the system</li>
	<li>Good design – coding style, structure, etc</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2012-03-29 13:35:45</wp:post_date>
		<wp:post_date_gmt>2012-03-29 02:35:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-28312</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pay Model</title>
		<link>http://blog.newsfeeder.co/?p=131</link>
		<pubDate>Sun, 01 Apr 2012 09:41:40 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[Last week myself, Aron and Ian put some thought into the pay model for our system. We discussed this on a few separate occasions during the week, including during our meeting with Luke.

The system will be subscription based (free users will pay to subscribed users for a certain period of time, say a month). To summarise the benefits we thought of for these subscribed users, they are:
<ul>
	<li>Access to the Downloader Application (checked by the application when it logs in)</li>
	<li>Ability to create their own custom sheet layouts (rather than just the few defaults available to free users)</li>
	<li>Increased limit (or unlimited) for number of sheets they can create and feeds they can add</li>
	<li>Higher priority of their feed items (meaning they will be crawled more often, so they will receive updates more frequently)</li>
</ul>
The subscriptions will be paid for via a payment portal, and will be outright payments rather than purchasing credit (or tokens). This is a lower requirement than the actual implementation of these user differences.

If anyone can think of any additional benefits they want to include, please let me know.

Boge]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2012-04-01 20:41:40</wp:post_date>
		<wp:post_date_gmt>2012-04-01 09:41:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pay-model</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Preliminary Notification System Implemented</title>
		<link>http://blog.newsfeeder.co/?p=133</link>
		<pubDate>Tue, 03 Apr 2012 03:19:23 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=133</guid>
		<description></description>
		<content:encoded><![CDATA[In response to the meeting on 2/4/2012, I have successfully implemented the notification system. It looks like this:

<a href="http://newsfeeder.co/wordpress/wp-content/uploads/2012/04/notifications.png"><img class="alignnone size-full wp-image-134" title="notifications" src="http://newsfeeder.co/wordpress/wp-content/uploads/2012/04/notifications.png" alt="" width="500" height="134" /></a>

The notifications are inserted into the database by the back-end system whenever a feed in the relevant sheet is updated. When a user views a sheet, it is checked whether there exists a notification relevant to the sheet and if there is, remove that notification.

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>133</wp:post_id>
		<wp:post_date>2012-04-03 14:19:23</wp:post_date>
		<wp:post_date_gmt>2012-04-03 03:19:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>preliminary-notification-system-implemented</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DNS Records</title>
		<link>http://blog.newsfeeder.co/?p=138</link>
		<pubDate>Tue, 03 Apr 2012 07:56:01 +0000</pubDate>
		<dc:creator>im607</dc:creator>
		<guid isPermaLink="false">http://newsfeeder.co/wordpress/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[Today I updated the DNS records to reflect all our needed domains. It looks like this:
<blockquote>
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top">newsfeeder.co</td>
<td valign="top">A</td>
<td valign="top"></td>
<td valign="top"><input type="text" name="dnsm_value[newsfeeder.co][0]" value="173.208.190.139" size="20" /></td>
<td valign="top"></td>
</tr>
<tr>
<td colspan="5"></td>
</tr>
<tr>
<td valign="top">blog.newsfeeder.co</td>
<td valign="top">A</td>
<td valign="top"></td>
<td valign="top"><input type="text" name="dnsm_value[newsfeeder.co][1]" value="173.208.190.139" size="20" /></td>
<td valign="top"></td>
</tr>
<tr>
<td colspan="5"></td>
</tr>
<tr>
<td valign="top">company.newsfeeder.co</td>
<td valign="top">A</td>
<td valign="top"></td>
<td valign="top"><input type="text" name="dnsm_value[newsfeeder.co][2]" value="173.208.190.139" size="20" /></td>
<td valign="top"></td>
</tr>
<tr>
<td colspan="5"></td>
</tr>
<tr>
<td valign="top">www.newsfeeder.co</td>
<td valign="top">A</td>
<td valign="top"></td>
<td valign="top"><input type="text" name="dnsm_value[newsfeeder.co][3]" value="173.208.190.139" size="20" /></td>
<td valign="top"></td>
</tr>
</tbody>
</table>
</blockquote>
The blog subdomain has been added in order to provide a base access URL for the WordPress blog (this one), and the company subdomain has been added to provide access to the company website.

These entries will require DNS propagation which usually takes 48-72 hours.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2012-04-03 18:56:01</wp:post_date>
		<wp:post_date_gmt>2012-04-03 07:56:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dns-records</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ian-mckays-diary"><![CDATA[Ian Mckay's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Threading sounds beautiful...</title>
		<link>http://blog.newsfeeder.co/?p=190</link>
		<pubDate>Thu, 05 Apr 2012 07:11:33 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[Threads as cheap process are used in our Back-End.

When the Back-End is executed, main thread takes control of the Master Controller (half implemented) which is responsible for creating and *joining module threads. Master loads all modules are specified by the configuration file.

For the modules, currently, we have the following modules:
1. Administrative Service Module (Framework only)
2. Crawler Module (Not implemented)
3. Statistic Module (Not implemented)

Each module will have a thread running and modules are independent.

Note: More functionalities? Add more modules!

For Administrative Service Module, it will spawn new threads to handle front-end connection requests and then controls Master to create or join other module threads (by indirectly control the main thread).

* Killing threads are not allowed in Master currently because I cannot prove that memory will not leak when the thread is killed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2012-04-05 18:11:33</wp:post_date>
		<wp:post_date_gmt>2012-04-05 07:11:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>threading-sounds-beautiful</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<category domain="post_tag" nicename="thread"><![CDATA[thread]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[Aron Hardy-Bardsley]]></wp:comment_author>
			<wp:comment_author_email>ajrhb957@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.44.161.137</wp:comment_author_IP>
			<wp:comment_date>2012-04-06 09:18:53</wp:comment_date>
			<wp:comment_date_gmt>2012-04-05 22:18:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A good way to handle killing threads is to set a variable (like isAlive) on the main class which the thread is using. Then inside whatever loop the thread is using, you can check for isAlive, when isAlive is false, you can safely dispose of any unmanaged resources from within the thread and let the thread return.

Psuedocode:

MasterThread:

Starts admin service thread (with class AdminServiceController)
Starts crawler thread (with class CrawlerController)
...

MainThread Catches TERM or KILL signal
adminServiceController->kill()
crawlerController->kill();

join admin service thread
join crawler controller thread

And in adminserviceController::kill()
set bool isavlive to false
Possibly send an interrupt so that the main loop in the thread responds

Then do the same for the other controllers. This will allow you to safely kill the application in a nice way.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-04-07 16:13:27</wp:comment_date>
			<wp:comment_date_gmt>2012-04-07 05:13:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your method is to send message to other threads that let them exit by themselves and then join them. That's exactly what I am doing and planned to do.

What I mean about "kill thread" above in native C code is to call pthread_cancel(). Sometimes, a module in the system may be no responding because of bugs or faults (e.g. blocked). At that time, we may want to kill that thread by calling pthread_cancel() (or related functions under boost::thread) and then re-spawn a new thread.

Note: When a thread is been killed, the variables in the stack belongs to the thread will not call their destructor to release memory. In terms of stability, it seems we have to only kill thread in emergency situation. After that, a maintenance of back-end is necessary.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>11</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Aron Hardy-Bardsley]]></wp:comment_author>
			<wp:comment_author_email>ajrhb957@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.130.37.85</wp:comment_author_IP>
			<wp:comment_date>2012-04-12 17:42:26</wp:comment_date>
			<wp:comment_date_gmt>2012-04-12 06:42:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Killing the threads in this way would only be done in an exceptional circumstance and if this was the case (due to a bug) we would need to investigate the issue manually in either circumstance to resolve the issue in the long term.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>12</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Meeting Minutes 2/4/2012</title>
		<link>http://blog.newsfeeder.co/?p=197</link>
		<pubDate>Wed, 04 Apr 2012 11:44:07 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=197</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports:</strong>
<ul>
	<li><strong>Ian</strong>:
<ul>
	<li>UI with new template refactored</li>
	<li>Separation between profile settings and account settings</li>
</ul>
</li>
	<li><strong>Alex</strong>:
<ul>
	<li>Log manager</li>
</ul>
</li>
	<li><strong>Aron</strong>:
<ul>
	<li>Requirements</li>
	<li>Investigating web service for Java</li>
</ul>
</li>
	<li><strong>Michael</strong>:
<ul>
	<li>Requirements</li>
	<li>Meeting minutes</li>
</ul>
</li>
</ul>
<strong>Agenda:</strong>
<ul>
	<li>Had a number of discussions concerning:</li>
	<li>Separation of the modules in the backend
<ul>
	<li>Current modules in the backend are for statistics, crawling, admin (and the master for starting all other modules and threads)</li>
</ul>
</li>
	<li>Messaging Interface
<ul>
	<li>New table in schema ‘Notification’</li>
	<li>SQL generation on item update</li>
	<li>Front end generates document</li>
</ul>
</li>
	<li>Gave the API higher importance (as suggested by Shaun)</li>
<ul>
	<li>Instead of having individual database connectors for each subsystem of the project, thinking of integrating them all into a shared library
<ul>
	<li>Will require a cross-language library</li>
	<li>Looking into SWIG as a possible option for wrapping the shared library</li>
	<li>We will only proceed with this if it is possible to run the shared library on all subsystems (C++, Java and PHP)</li>
</ul>
</li>
</ul>
	<li>Looked over the requirements to be submitted this week. Made no major changes to the document other than adding the 'Notifications' requirement to the front-end</li>
</ul>
<strong>Actions for next week’s meeting</strong>:
<ul>
	<li><strong>Aron</strong>
<ul>
	<li>Look into adding generalised Database Shared Library</li>
</ul>
</li>
	<li><strong>Ian</strong>
<ul>
	<li>Notifications, add feed widget</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Fully implement master thread</li>
	<li>Start administrator service and integration with the front-end</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Finalise requirements document</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2012-04-04 22:44:07</wp:post_date>
		<wp:post_date_gmt>2012-04-04 11:44:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-242012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Requirements Document</title>
		<link>http://blog.newsfeeder.co/?p=208</link>
		<pubDate>Fri, 06 Apr 2012 00:18:07 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[We got the requirements document submitted!!

Very happy about this, I think we have done a really good job with it, good to see it completed after having to review it as a group and as individuals time after time after time.

I hope it makes what we are trying to achieve obvious, I think we could have tightened a few of the non-functional requirements (like loading things quicker etc) but we cannot promise something we might not be able to deliver so we will just have to see if we can smash those performance metrics in the final product!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2012-04-06 11:18:07</wp:post_date>
		<wp:post_date_gmt>2012-04-06 00:18:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>requirements-document</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Database Layer - A Separate Shared Library</title>
		<link>http://blog.newsfeeder.co/?p=222</link>
		<pubDate>Fri, 06 Apr 2012 01:38:11 +0000</pubDate>
		<dc:creator>ajrhb957</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[Have been discussing with our group the advantages of having all database interaction in a separately compiled and managed shared library project. This shared library would be used by any internal sub system which would require the use of the database, including the API web service, back-end and front-end systems.

Advantages:
<ul>
	<li>Non-duplication of boilerplate code. For example, if i need to get a user from the front-end, back-end and API web service systems, i would need to write/test/maintain code in multiple places.</li>
	<li> Reduced risk of corrupting the database. We could be risking database integrity by having multiple sub systems doing thier own things with the database (what if one application updates a set of records in a different way to another).</li>
	<li> Single point of maintenance. If we introduce auditing we can do it consistently and cleanly. If we change the database schema, we only need to update and test 1 place.</li>
</ul>
I cannot stress enough how this would improve our architecture. However some negatives:
<ul>
	<li>Would require wrappers to be built for the shared library for the other languages (java, php) we are using.</li>
	<li> Might be a pain in the ass for the front-end and back-end developer having to re-conpile a separate project every time they want a new database function</li>
</ul>
To address the 1st negative, we are investigating a third party utility called SWIG which i found. This utility can be included in our build process to compile a php extension and java JNI libraries for use by the front-end and web service projects. The back-end is lucky since its written in C++, no extra work required!
As for the second negative, i think we can make this easier by putting an svn client and build tools on the front-end/web service servers. That way, the process for updating the front-end shared library would be simply running svn update, make and then make install commands. These could be put into a single shell script.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2012-04-06 12:38:11</wp:post_date>
		<wp:post_date_gmt>2012-04-06 01:38:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-database-layer-a-separate-shared-library</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aron-hardy-bardsleys-diary"><![CDATA[Aron Hardy-Bardsley's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-04-07 16:31:13</wp:comment_date>
			<wp:comment_date_gmt>2012-04-07 05:31:13</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I have seen the code of the database layer in the svn. Is that only a sample (prototype) or real product? or just a framework?

P.S. A good way to include header files:
For example: feedcontroller.h
Please do not use #include "../model/feed.h"
Instead, use #include "nfdb/model/feed.h" and then add "-I" when compiling.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Aron Hardy-Bardsley]]></wp:comment_author>
			<wp:comment_author_email>ajrhb957@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>130.130.37.85</wp:comment_author_IP>
			<wp:comment_date>2012-04-12 17:37:29</wp:comment_date>
			<wp:comment_date_gmt>2012-04-12 06:37:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not a real product, just a sample. I am still working on this.

Thank you for your remark on including header files, i agree that is a nice way to do it and ill swap the code over later.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-04-16 00:00:56</wp:comment_date>
			<wp:comment_date_gmt>2012-04-15 13:00:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[BTW, I just found that the MySQL C++ Connector is not mature. There is NO documentations online. I strongly recommend to use MySQL C Connector (libmysql) to develop the database layer.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Requirements and Beyond</title>
		<link>http://blog.newsfeeder.co/?p=231</link>
		<pubDate>Thu, 05 Apr 2012 07:08:28 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[Well, the requirements document has been completed after a few weeks of work. In the past week I have spent about 2 hours each day reading over the requirements and correcting them (adding forgotten requirements, updating priorities, etc).

Overall I am happy with the way they turned out, we provided a number of small, well defined requirements (60 at last count), which means we can easily use them as check-boxes in the actual development.

The only real things that I would have liked to change in the document were:
<ul>
	<li>Add some better defined requirements regarding the Downloader Application (though this wasn't possible as we haven't come to any real decisions regarding how it will work</li>
	<li>Better defined some of the non-functional requirements, most notably the 'Sustainability' and 'Performance' requirements</li>
</ul>
That said, well done everyone, Luke was happy with the requirements so we should be fine. With them finished I'm going to start implementing the Customisable Sheet Layout functionality.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2012-04-05 18:08:28</wp:post_date>
		<wp:post_date_gmt>2012-04-05 07:08:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>requirements-and-beyond</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="michael-boges-diary"><![CDATA[Michael Boge's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 5/4/12</title>
		<link>http://blog.newsfeeder.co/?p=235</link>
		<pubDate>Fri, 06 Apr 2012 07:11:37 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>A short meeting today due to the business of Easter, only Michael and Aron could attend.</li>
	<li>The main aim of this meeting was to look through the requirements document with Luke and check everything was fine. Luke had the following suggestions:
<ul>
	<li>Remember to add the glossary diagram, for explain the relationships between sheets, feeds and items</li>
	<li>Change the ID’s to be more relevant to the requirements document, since at this stage they aren’t being used in any other document. Changed from ID’s like ‘FUSR1’ to ‘F2.1’</li>
	<li>Add a requirements summary table to explain the priorities without the assessors needing to read through the full descriptions</li>
	<li>Remove the time constraint as it is not well defined (only wrote the requirement for the project as a whole, not the individual parts)</li>
</ul>
</li>
	<li>Explained to Luke our idea for using a shared library for database access, and our use of SWIG. Luke agreed with this decision.</li>
	<li>Luke explained he will not be able to meet with us for a while, due to the Easter break and him travelling to Singapore</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2012-04-06 18:11:37</wp:post_date>
		<wp:post_date_gmt>2012-04-06 07:11:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-5412</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 12/4/12</title>
		<link>http://blog.newsfeeder.co/?p=253</link>
		<pubDate>Sun, 15 Apr 2012 07:30:39 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=253</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li><strong>Progress Reports</strong>
<ul>
	<li><strong>Ian – </strong>Currently converting the abuse service to use the new UI theme</li>
	<li><strong>Alex – </strong>Implemented master thread and started on the implementation of the admin service
<ul>
	<li><strong>Problems Found for Admin Service:</strong>
<ul>
	<li>Authentication – Using basic authentication for prototype. Symmetrical key encryption for final product</li>
	<li>How do we notify when a module is stopped or started? - Poll from front end and keep querying until the system registers it as having started/stopped</li>
</ul>
</li>
</ul>
</li>
	<li><strong>Aron – </strong>Investigated shared library and SWIG, so far it is looking possible but difficult</li>
	<li><strong>Michael  – </strong>Added all meeting minutes to the blog site and started on new documentation (vision for technical documentation, etc)</li>
</ul>
</li>
	<li><strong>Agenda</strong>
<ul>
	<li>Meeting in Easter holidays, hence the later data, no meeting with Luke this week</li>
	<li>Had discussion on the shared library
<ul>
	<li>Aron explained the general idea of the library
<ul>
	<li>Act as a database connector to all the parts of the system (front end, backend and downloader app)</li>
	<li>Main function is to be used as a query builder where each part sends its parameters and receives the response</li>
</ul>
</li>
</ul>
</li>
	<li>Discussed iterations
<ul>
	<li>Main decision was to finish our initial throw-away prototype, so we could start on the actual product.</li>
	<li>Already have both the frontend and backend working together and performing the base (and most high) requirements, in a previous SVN build. So will be using this as a definition of the prototype.</li>
	<li>The reason for this decision was so we can have a major milestone for the project, meaning we will know how far we have progressed in actual development.</li>
</ul>
</li>
	<li>Ian purchased ‘News Feeder’ shirt, showed it to the rest of the team. Everyone agreed to purchase a shirt as well, so our group will look professional for trade show.</li>
	<li>Discussed technical documentation
<ul>
	<li>Mainly talked about how we need to start this as it is the next major deliverable</li>
	<li>Asked Michael to find out the sections required for this document so it can be discussed next week</li>
</ul>
</li>
	<li>Discussed abuse reporting
<ul>
	<li>Authentication – we will be using basic authentication, where initially the web master will login using the data from the crawler when crawling their site. They will then login by providing a username and password that they set after the initial login.</li>
	<li>…</li>
</ul>
</li>
</ul>
</li>
	<li><strong>Actions for next meeting</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Implement abuse system authentication (and generation of meta data for initial login)</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Rollback to working crawler module and integrate with current solution for prototype</li>
	<li>Continue work on the admin service</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Continue work with SWIG</li>
	<li>Add queue threading to prototype</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Add queue priority algorithm to prototype</li>
	<li>Get list of technical documentation requirements</li>
</ul>
</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2012-04-15 18:30:39</wp:post_date>
		<wp:post_date_gmt>2012-04-15 07:30:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-12412</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 16/4/12</title>
		<link>http://blog.newsfeeder.co/?p=257</link>
		<pubDate>Tue, 17 Apr 2012 12:29:27 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=257</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Report:</strong>
<ul>
	<li><strong>Alex</strong>
<ul>
	<li>Added crawler into prototype, ready to have priority queue integrated</li>
	<li>Still implementing admin service</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Still looking into the shared library and SWIG</li>
	<li>Made progress with SWIG, is looking more practical at the moment</li>
</ul>
</li>
	<li><strong>Ian</strong>
<ul>
	<li>Finished the abuse reporting service<strong></strong></li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Looked into technical documentation<strong></strong></li>
	<li>Designing layout creation interface</li>
</ul>
</li>
</ul>
<strong>Agenda:</strong>
<ul>
	<li>Short meeting and no extra meeting this week due to Luke’s availability<strong></strong></li>
	<li>Alex brought up issue with parser, it currently does not correctly register redirections (it attempts to crawl the page that is redirected to)<strong></strong>
<ul>
	<li>Ian explained how to fix this using the Curl library, an extra option can be set to not follow redirects<strong></strong></li>
</ul>
</li>
	<li>Discussed our next project deliverables, namely:<strong></strong>
<ul>
	<li>Technical Documentation<strong></strong></li>
	<li>User Manual<strong></strong></li>
</ul>
</li>
	<li>Discussed the possible sections and who could do them for the technical documentation:<strong></strong>
<ul>
	<li>Vision - Michael<strong></strong></li>
	<li>Requirements - Done<strong></strong></li>
	<li>Constraints and Operational Requirements - Michael<strong></strong></li>
	<li>Software/Technologies - Aron<strong></strong></li>
	<li>Hardware Specifications - Ian<strong></strong></li>
	<li>Host Purchasing and Domain Registration – Ian and Alex<strong></strong></li>
	<li>Development tools - Michael<strong></strong></li>
	<li>Architecture document - Everyone<strong></strong>
<ul>
	<li>Repository Structure<strong></strong></li>
	<li>Subsystems/Modules<strong></strong></li>
	<li>System Interaction</li>
</ul>
</li>
</ul>
</li>
	<li>UI Design – Michael and Ian<strong></strong></li>
	<li>Design Document (sections still to be defined) - Everyone<strong></strong>
<ul>
	<li>UI<strong></strong></li>
	<li>Classes<strong></strong></li>
	<li>Data Flow<strong></strong>
<ul>
	<li>Classes<strong></strong></li>
	<li>Data Dictionary<strong></strong></li>
	<li>DFD’s</li>
	<li>Entity Relationship Diagrams</li>
</ul>
</li>
</ul>
</li>
	<li>Communications
<ul>
	<li>Meetings</li>
	<li>Diary</li>
	<li>Blog</li>
	<li>Emails</li>
</ul>
</li>
</ul>
<strong>Actions for the next meeting:</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Write up dummy PHP protocol for the admin service so the front end interface can be developed</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Continue working on the admin service</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Complete SWIG investigation and confirm if SWIG and the Shared Library are valid choices</li>
	<li>Implement crawler threading</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Implement crawler queuing</li>
	<li>Investigate layouts further</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2012-04-17 23:29:27</wp:post_date>
		<wp:post_date_gmt>2012-04-17 12:29:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-16412</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>AdminService module is now available</title>
		<link>http://blog.newsfeeder.co/?p=259</link>
		<pubDate>Wed, 25 Apr 2012 11:55:42 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=259</guid>
		<description></description>
		<content:encoded><![CDATA[After a long time researching on boost and thread interacting, the AdminService module is finally online at the back-end.

To run at the back-end, just type "sh run". There is already a shell script for you. Or easily, put all libraries to the the system library folder. For example: /usr/lib. Then run "./nfrd -d" to start up the back-end.

All detailed settings, please refer to the nrfd.cfg.

If the front-end need more functionally, please tell me.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2012-04-25 22:55:42</wp:post_date>
		<wp:post_date_gmt>2012-04-25 11:55:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>adminservice-module-is-now-available</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adminservice"><![CDATA[AdminService]]></category>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Compiler Issues</title>
		<link>http://blog.newsfeeder.co/?p=262</link>
		<pubDate>Wed, 25 Apr 2012 12:16:46 +0000</pubDate>
		<dc:creator>sz653</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=262</guid>
		<description></description>
		<content:encoded><![CDATA[To compile our Back-End, boost is needed. However, the boost header files have many warnings which are annoying and easily mixed with all warning generated by our source code.

Hence, "#pragma gcc diagnostic" is used for ignoring the warning from boost only. However, "#pragma gcc diagnostic pop" and "#pragma gcc diagnostic push" are added from gcc 4.6. Earlier version of GCC will notice warning on the them. If you are compile with gcc before 4.6 just ignore those warnings.

Besides, gcc/g++ also provide source optimization functionality. Hence, "-O2" will be used for compile flag. "-O3" may be better or worse and it is un-determinable so that is not used. For CPUs now use SSE SSE2 SSE3 and SSE4 instruction sets, we also can apply them to our back-end for speeding up. If general deployment, no flags set. If the back-end is supposed to run on a SSE4 cpu machine, then "-msse4" can be set.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2012-04-25 23:16:46</wp:post_date>
		<wp:post_date_gmt>2012-04-25 12:16:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>compiler-issues-found</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="back-end"><![CDATA[Back-End]]></category>
		<category domain="post_tag" nicename="compiler"><![CDATA[compiler]]></category>
		<category domain="category" nicename="shiwei-zhangs-diary"><![CDATA[Shiwei Zhang's Diary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Aron Hardy-Bardsley]]></wp:comment_author>
			<wp:comment_author_email>ajrhb957@uowmail.edu.au</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>121.44.91.133</wp:comment_author_IP>
			<wp:comment_date>2012-04-27 12:04:19</wp:comment_date>
			<wp:comment_date_gmt>2012-04-27 01:04:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is sort of related. Can we get a makefile or something for this?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>4</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[Shiwei Zhang]]></wp:comment_author>
			<wp:comment_author_email>needself@vip.qq.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.nbs.im</wp:comment_author_url>
			<wp:comment_author_IP>123.243.216.31</wp:comment_author_IP>
			<wp:comment_date>2012-04-28 05:06:23</wp:comment_date>
			<wp:comment_date_gmt>2012-04-27 18:06:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[makefile is now uploaded to the svn.
Make sure you modify the header file and library path for boost in the makefile before run make.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Meeting Minutes - 23/4/12</title>
		<link>http://blog.newsfeeder.co/?p=264</link>
		<pubDate>Wed, 25 Apr 2012 12:02:28 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=264</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports</strong>
<ul>
	<li>Ian
<ul>
	<li>Completed testing of server socket on client</li>
	<li>Implemented SSL for socket</li>
</ul>
</li>
	<li>Alex
<ul>
	<li>50% of admin service implemented</li>
</ul>
</li>
	<li>Aron
<ul>
	<li>Began implementing crawler, still discussing the possible ways to increase performance of the current model</li>
</ul>
</li>
	<li>Michael
<ul>
	<li>Finalised priority algorithm and began implementing crawler queue items</li>
</ul>
</li>
</ul>
<strong>Agenda</strong>
<ul>
	<li>Ian introduced a new feature: Starred Items
<ul>
	<li>Click on star for a feed or item</li>
	<li>These items would be ‘favourited’ and visible for a longer time on the user’s sheets</li>
	<li>Possible to introduce a sheet made up of only a user’s starred items/feeds (like the starred section of an email inbox)</li>
</ul>
</li>
	<li>Discussed how we would be storing the favourite icons from the crawled feeds database
<ul>
	<li>Database table with:
<ul>
	<li>Domain</li>
	<li>Fav Icon</li>
</ul>
</li>
	<li>Any articles from a particular domain will display that fav icon</li>
	<li>Problems with this solution:
<ul>
	<li>Some domains may consist of multiple fav icons (such as a domain where there are multiple blogs)</li>
	<li>This solution assumes the fav icon will be readily available as a fav.ico file (which is not always the case) – RESOLVED, we will check for this .ico or otherwise by the linking done in the domain pages</li>
</ul>
</li>
	<li>System will store the icons based on whether they are already stored in the database or not (to prevent duplicate images being stored wasting space)</li>
</ul>
</li>
	<li>Discussed the security, mainly SSL
<ul>
	<li>Ian has purchased a SSL certificate and has implemented it on the frontend</li>
	<li>Looking into how simple it is to implement SSL for the backend as well</li>
</ul>
</li>
	<li>Further discussed the ‘patch and match’ system
<ul>
	<li>Will be a rule based system</li>
	<li>Mostly likely method will be going to the container(s) of the body of a HTML page where text similar to the summary is held, then get all content within them</li>
	<li>3 categories of tags being parsed, each will be handled differently:
<ul>
	<li>Keep tags and content</li>
	<li>Remove tags and keep content</li>
	<li>Remove tags and content</li>
</ul>
</li>
	<li>All styling will be removed from tags (we will substitute with our own)</li>
	<li>Images will be stored</li>
</ul>
</li>
</ul>
<strong>Actions for the Next Meeting</strong>
<ul>
	<li>Ian
<ul>
	<li>Test socket integration with Alex</li>
	<li>Implement SSL</li>
</ul>
</li>
	<li>Alex
<ul>
	<li>Finish implementing the admin service</li>
	<li>Test sockets with Ian (without using SSL)</li>
</ul>
</li>
	<li>Aron
<ul>
	<li>Continue implementing the crawler queue</li>
	<li>Decided is SWIG is a viable option for the shared library</li>
</ul>
</li>
	<li>Michael
<ul>
	<li>Continue implementing the crawler queue</li>
	<li>Start on vision document</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2012-04-25 23:02:28</wp:post_date>
		<wp:post_date_gmt>2012-04-25 12:02:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>264</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 30/4/12</title>
		<link>http://blog.newsfeeder.co/?p=272</link>
		<pubDate>Fri, 04 May 2012 10:00:49 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports</strong>
<ul>
	<li>Ian
<ul>
	<li>Finished admin service frontend</li>
</ul>
</li>
	<li>Alex
<ul>
	<li>Finished admin service backend</li>
</ul>
</li>
	<li>Aron
<ul>
	<li>SWIG working for:
<ul>
	<li>Java</li>
	<li>C++</li>
	<li>Not PHP yet (Aron asked Ian to help him integrate due to issues with namespaces)</li>
</ul>
</li>
</ul>
</li>
	<li>Michael
<ul>
	<li>Began vision document and gathered list of documents to include in technical documentation</li>
</ul>
</li>
</ul>
<strong>Agenda</strong>
<ul>
	<li>Discussed SWIG, Aron explained it was going well. We decided to definitely use SWIG and the shared library in our solution</li>
	<li>Item Retention
<ul>
	<li>Based off algorithm an algorithm. This will take into account the following:
<ul>
	<li>Starred items retained forever</li>
	<li>How many on sheets</li>
	<li>Date retention (unless starred feeds will always be dumped after 12 months)</li>
	<li>Based on feed updates (feeds updated more often will be held for shorter, since more content will be passing through)</li>
	<li>Limited number of items (e.g. only holding 10 items for all feeds)</li>
</ul>
</li>
</ul>
</li>
	<li>Documentation breakdown:
<ul>
	<li>Subsystems:
<ul>
	<li>Downloader App  - Aron</li>
	<li>Front end (PDF generator included) - Ian</li>
	<li>Back end - Alex</li>
	<li>Shared Library - Michael</li>
	<li>Web Service - Aron</li>
	<li>Database - ???</li>
</ul>
</li>
	<li>Vision    - Michael</li>
	<li>Requirements - Done</li>
	<li>Use Cases (diagrams, descriptions) – ALL</li>
	<li>Architecture – Aron, ALL</li>
	<li>Class Diagrams – ALL</li>
	<li>UI Design - Ian</li>
	<li>DFD – Talk about with Luke</li>
	<li>State Machine Diagrams – Talk about with Luke</li>
	<li>Interaction Diagrams – started</li>
	<li>USER MANAUL – IAN and Aron</li>
</ul>
</li>
</ul>
<strong>Actions for Next Week</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Start writing the user manual</li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Start formal class diagrams for backend sub-system</li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Finish implementing SWIG with PHP</li>
	<li>Start on designing the Downloader Application (structure, etc)</li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Continue working on the vision document</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2012-05-04 21:00:49</wp:post_date>
		<wp:post_date_gmt>2012-05-04 10:00:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-30412</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 2/5/12</title>
		<link>http://blog.newsfeeder.co/?p=276</link>
		<pubDate>Sat, 05 May 2012 10:04:15 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>First meeting with Luke in 3 weeks, so focused mainly on explaining our progress and decisions we had made over that time, including:
<ul>
	<li>The use of a Shared Database Library (SWIG), Luke approved of this design</li>
	<li>Use of SSL, explained the front-end had been tested using SSL</li>
	<li>Demonstrated the Admin Service to Luke</li>
	<li>Storage of images (particularly favourite icons) in the database. We explained we would be storing all images in the database, in 100x100 size thumbnails with links to the full image (to save space)</li>
	<li>Methods of item retention (explained our algorithm ideas)</li>
	<li>…</li>
</ul>
</li>
	<li>Discussed with Luke our technical documentation, in terms of what was expected:
<ul>
	<li>Mainly diagrams and architecture documents to explain how we intended to build the system
<ul>
	<li>Sub-systems explanation (why we broke them down into the sub-systems, can they be run independently, etc)</li>
	<li>Class diagrams and explanations</li>
	<li>Use cases</li>
	<li>User manual (can be with or without screenshots for the preliminary document, we chose to include them in this version)</li>
</ul>
</li>
	<li>DFD’s, State diagrams and other lower level diagrams not as important</li>
</ul>
</li>
	<li>Ian suggested to Luke the idea of adding a ‘Bookmarklet’ which the user can use to automatically add a feed to News Feeder
<ul>
	<li>Good idea</li>
	<li>Added as a low level requirement</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2012-05-05 21:04:15</wp:post_date>
		<wp:post_date_gmt>2012-05-05 10:04:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-2512</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes - 7/5/12</title>
		<link>http://blog.newsfeeder.co/?p=278</link>
		<pubDate>Mon, 07 May 2012 10:09:08 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Progress Reports</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Has been fixing issues with the CSS (such as it cutting off heading text), had a few issues which needed a rollback<strong></strong></li>
	<li>Started the user manual, added registration, login, account management, etc. Hasn’t been able to get too far into because of the front-end issue<strong></strong></li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Drew up his class diagrams and explanations, needs to confirm how we want to structure the class diagrams before he finishes them<strong></strong></li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Got SWIG working with PHP, confirmed that it will work as expected<strong></strong></li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Finished vision document</li>
</ul>
</li>
</ul>
<strong> </strong>

<strong>Agenda</strong>
<ul>
	<li>Discussed how we wanted to present the technical diagrams
<ul>
	<li>VISIO will be used for all diagrams (since we all have access to it)</li>
	<li>Everyone responsible for their own sub-system</li>
	<li>Class diagrams – name and relationships only, with descriptions and summaries of each class written up in another section (no methods and variables yet)</li>
	<li>User manual – not too in depth, pictures not used for reference only to illustrate the steps. Don’t have to include screenshots for non-finished sections</li>
	<li>UI design – screenshots of current design as well as mockups. No specific method for mockups, can use whatever program we see fit</li>
	<li>Discussed Aron’s success with SWIG
<ul>
	<li>Explained the problem with PHP (namespace issue)</li>
	<li>Discussed how the system will be structured:
<ul>
	<li>Model View Controller (without the views…) using factory patterns to a degree</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
	<li>Passed this sub-system onto Michael for development and implementation</li>
	<li>Confirmed everyone knew which sections of the documentation they were doing (see last week’s documentation)</li>
</ul>
<strong>Actions for Next Week</strong>
<ul>
	<li><strong>Ian</strong>
<ul>
	<li>Will finish the user manual and attempt to complete the use cases<strong></strong></li>
</ul>
</li>
	<li><strong>Alex</strong>
<ul>
	<li>Will finish the backend class diagrams and start on the architecture document for the backend<strong></strong></li>
</ul>
</li>
	<li><strong>Aron</strong>
<ul>
	<li>Will start writing design documents for the Java Downloader Application and Web Service<strong></strong></li>
</ul>
</li>
	<li><strong>Michael</strong>
<ul>
	<li>Will start design documentation for shared database library</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2012-05-07 21:09:08</wp:post_date>
		<wp:post_date_gmt>2012-05-07 10:09:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-7512</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Meeting Minutes 9/5/12</title>
		<link>http://blog.newsfeeder.co/?p=280</link>
		<pubDate>Sun, 13 May 2012 09:52:42 +0000</pubDate>
		<dc:creator>mjb932</dc:creator>
		<guid isPermaLink="false">http://blog.newsfeeder.co/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[<ul>
	<li>Alex showed us his documentation progress (class diagrams and use cases)</li>
	<li>Luke explained how our project was evaluated in the meeting
<ul>
	<li>Relatively few comments (good thing, means there were no problems)</li>
	<li>“Potential” High Distinction</li>
</ul>
</li>
	<li>Ian discussed our process of adding feeds to a sheet:
<ul>
	<li>Add feeds you are interested in (added via search and pre-defined) on one screen</li>
	<li>Then on another screen set the properties of each feed (e.g. number of items to show, show images, etc)</li>
	<li>This was done as currently feeds are added via an input box (which does not provide the room necessary for setting the properties for all functions, unless is done one at a time)</li>
</ul>
</li>
	<li>Add multi-language support  as a requirement
<ul>
	<li>Low level requirement as there is a-lot of work</li>
	<li>Will be based off the browser accept-language</li>
	<li>Store language in database (retrieved from RSS or HTTP headers)</li>
</ul>
</li>
	<li>Parsing HTML
<ul>
	<li>Can’t use RapidXML as HTML is not valid XML</li>
	<li>Possible solutions:
<ul>
	<li>Use Tidy to parse HTML into XML then parse using RapidXML</li>
	<li>Write our own HTML parser</li>
</ul>
</li>
	<li>Main problem with using Tidy is that it is an executable, which we will be calling via system calls in the document</li>
	<li>Essentially all we need is a ‘DOM constructor’, we could then run our own parser to extract content</li>
	<li>Ian and Alex said they would look into finding another solution, this time from a C++ source to adapt from, and failing that would begin work on a custom DOM constructor</li>
</ul>
</li>
	<li>Explained patch and match methods to Luke
<ul>
	<li>By default:
<ul>
	<li>Using the RSS summary look for the body content</li>
	<li>Grab the element this content is in</li>
	<li>Extract all content in this element</li>
</ul>
</li>
	<li>Not robust enough, it will be fixed by using ‘rules’</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2012-05-13 20:52:42</wp:post_date>
		<wp:post_date_gmt>2012-05-13 09:52:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meeting-minutes-9512</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="meeting-minutes"><![CDATA[Meeting Minutes]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
