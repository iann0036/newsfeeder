/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	#include "include/user.h"
	#include "include/sheet.h"
	#include "include/feed.h"
	#include "include/datetime.h"
	#include "include/iusercontroller.h"
	#include "include/isheetcontroller.h"
	#include "include/ifeedcontroller.h"
	#include "include/dbfactory.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1DateTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DateTime *)new DateTime();
  *(DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1DateTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DateTime *arg1 = 0 ;
  DateTime *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DateTime const & reference is null");
    return 0;
  } 
  result = (DateTime *)new DateTime((DateTime const &)*arg1);
  *(DateTime **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1DateTime(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DateTime *arg1 = (DateTime *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DateTime **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_DateTime_1ExportToMySQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = ((DateTime const *)arg1)->ExportToMySQL();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1ImportFromMySQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return ;
  } 
  (arg1)->ImportFromMySQL((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1ParseFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->ParseFromString((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = (int)((DateTime const *)arg1)->GetSecond();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = (int)((DateTime const *)arg1)->GetMinute();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = (int)((DateTime const *)arg1)->GetHour();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = (int)((DateTime const *)arg1)->GetDay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = (int)((DateTime const *)arg1)->GetMonth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libnfdbJNI_DateTime_1GetYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DateTime *arg1 = (DateTime *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  result = (int)((DateTime const *)arg1)->GetYear();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetSecond(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSecond(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetMinute(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMinute(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetHour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHour(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDay(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetMonth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMonth(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetYear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetYear(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1Set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetTimeOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetTimeOffset(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetTimeOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetTimeOffset(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetTimeOffset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetTimeOffset(arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDateOffset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetDateOffset(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDateOffset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetDateOffset(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_DateTime_1SetDateOffset_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DateTime *arg1 = (DateTime *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DateTime **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetDateOffset(arg2);
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1User(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  User *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (User *)new User();
  *(User **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1User(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  User *arg1 = (User *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(User **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Sheet(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Sheet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Sheet *)new Sheet();
  *(Sheet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Sheet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Sheet *arg1 = (Sheet *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Sheet **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1Feed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Feed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Feed *)new Feed();
  *(Feed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1Feed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Feed *arg1 = (Feed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Feed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_ISheetController_1GetSheetById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  ISheetController *arg1 = (ISheetController *) 0 ;
  int arg2 ;
  Sheet result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISheetController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetSheetById(arg2);
  *(Sheet **)&jresult = new Sheet((const Sheet &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ISheetController_1UpdateSheet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISheetController *arg1 = (ISheetController *) 0 ;
  Sheet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISheetController **)&jarg1; 
  arg2 = *(Sheet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Sheet & reference is null");
    return ;
  } 
  (arg1)->UpdateSheet(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_ISheetController_1AddSheet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISheetController *arg1 = (ISheetController *) 0 ;
  Sheet *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISheetController **)&jarg1; 
  arg2 = *(Sheet **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Sheet & reference is null");
    return ;
  } 
  (arg1)->AddSheet(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1ISheetController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISheetController *arg1 = (ISheetController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISheetController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_IUserController_1GetUserById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  IUserController *arg1 = (IUserController *) 0 ;
  int arg2 ;
  User result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IUserController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetUserById(arg2);
  *(User **)&jresult = new User((const User &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_IUserController_1GetUserByUsername(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  IUserController *arg1 = (IUserController *) 0 ;
  string arg2 ;
  string *argp2 ;
  User result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IUserController **)&jarg1; 
  argp2 = *(string **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetUserByUsername(arg2);
  *(User **)&jresult = new User((const User &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_IUserController_1UpdateUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IUserController *arg1 = (IUserController *) 0 ;
  User *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IUserController **)&jarg1; 
  arg2 = *(User **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "User & reference is null");
    return ;
  } 
  (arg1)->UpdateUser(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_IUserController_1AddUser(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IUserController *arg1 = (IUserController *) 0 ;
  User *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IUserController **)&jarg1; 
  arg2 = *(User **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "User & reference is null");
    return ;
  } 
  (arg1)->AddUser(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1IUserController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IUserController *arg1 = (IUserController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IUserController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_IFeedController_1GetFeedById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  IFeedController *arg1 = (IFeedController *) 0 ;
  int arg2 ;
  Feed result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IFeedController **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetFeedById(arg2);
  *(Feed **)&jresult = new Feed((const Feed &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_IFeedController_1UpdateFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IFeedController *arg1 = (IFeedController *) 0 ;
  Feed *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IFeedController **)&jarg1; 
  arg2 = *(Feed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Feed & reference is null");
    return ;
  } 
  (arg1)->UpdateFeed(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_IFeedController_1AddFeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  IFeedController *arg1 = (IFeedController *) 0 ;
  Feed *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IFeedController **)&jarg1; 
  arg2 = *(Feed **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Feed & reference is null");
    return ;
  } 
  (arg1)->AddFeed(*arg2);
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1IFeedController(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IFeedController *arg1 = (IFeedController *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IFeedController **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_DBFactory_1GetFeedController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IFeedController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IFeedController *)DBFactory::GetFeedController();
  *(IFeedController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_DBFactory_1GetSheetController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISheetController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISheetController *)DBFactory::GetSheetController();
  *(ISheetController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_DBFactory_1GetUserController(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IUserController *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (IUserController *)DBFactory::GetUserController();
  *(IUserController **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libnfdbJNI_new_1DBFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DBFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DBFactory *)new DBFactory();
  *(DBFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libnfdbJNI_delete_1DBFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DBFactory *arg1 = (DBFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DBFactory **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

